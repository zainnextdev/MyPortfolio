--- Portfolio Snapshot: Zain Khalid ---
--- Generated on: Wed, 27 Aug 2025 10:53:34 GMT ---



=============== 📌 CRITICAL CONFIG FILES ===============


--- FILE: package.json ---

{
  "name": "zain-khalid-portfolio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint",
  "build:analyze": "ANALYZE=true next build",
  "lhci:install": "npm install -g @lhci/cli",
  "lhci:build": "npm run build",
  "lhci:run": "lhci autorun"
},
  "dependencies": {
    "@react-three/drei": "^10.7.2",
    "@react-three/fiber": "^9.3.0",
    "@studio-freight/lenis": "^1.0.42",
    "d3-geo": "^3.1.1",
    "gsap": "^3.13.0",
    "lucide-react": "^0.539.0",
    "next": "15.4.6",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-email": "^4.2.8",
    "react-hot-toast": "^2.6.0",
    "react-icons": "^5.5.0",
    "resend": "^6.0.1",
    "split-type": "^0.3.4",
    "three": "^0.179.1",
    "zod": "^4.1.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@lhci/cli": "^0.15.1",
    "@next/bundle-analyzer": "^15.5.0",
    "@types/d3-geo": "^3.1.0",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.4.6",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.1",
    "typescript": "^5",
    "vercel": "^46.0.3"
  }
}


--- END OF FILE: package.json ---


--- FILE: tsconfig.json ---

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- END OF FILE: tsconfig.json ---


--- FILE: postcss.config.js ---

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--- END OF FILE: postcss.config.js ---



=============== 🌳 DIRECTORY STRUCTURE ===============

├── .gitignore
├── .vercel
│   ├── project.json
│   └── README.txt
├── eslint.config.mjs
├── LICENSE
├── lighthouserc.js
├── next-env.d.ts
├── next.config.ts
├── package.json
├── postcss.config.js
├── public
│   ├── android-chrome-192x192.png
│   ├── android-chrome-512x512.png
│   ├── apple-touch-icon.png
│   ├── favicon-16x16.png
│   ├── favicon-32x32.png
│   ├── file.svg
│   ├── globe.svg
│   ├── hologram_globe.glb
│   ├── hologram_globe_compressed.glb
│   ├── icons
│   │   ├── antdesign.png
│   │   ├── clerk.png
│   │   ├── cloudinary.png
│   │   ├── cpp.png
│   │   ├── framer.png
│   │   ├── gsap.png
│   │   ├── logo.png
│   │   ├── marketing.png
│   │   ├── neon.png
│   │   ├── nextjs.png
│   │   ├── postgresql.png
│   │   ├── prisma.png
│   │   ├── python.png
│   │   ├── react.png
│   │   ├── sass.png
│   │   ├── seo.png
│   │   ├── supabase.png
│   │   ├── tailwind.png
│   │   ├── threejs.png
│   │   ├── typescript.png
│   │   └── vercel.png
│   ├── next.svg
│   ├── og-image.png
│   ├── projects
│   │   ├── admin-portal-display.png
│   │   ├── ajcollections-display.png
│   │   └── genius-mart-display.png
│   ├── site.webmanifest
│   ├── vercel.svg
│   ├── window.svg
│   ├── zain-khalid-portrait.jpg
│   ├── zain-khalid-resume.pdf
│   └── zain-khalid-resume.png
├── README.md
├── snapshot.mjs
├── src
│   ├── app
│   │   ├── api
│   │   │   └── send
│   │   │       └── route.ts
│   │   ├── favicon.ico
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   ├── not-found.tsx
│   │   ├── page.tsx
│   │   ├── robots.ts
│   │   └── sitemap.ts
│   ├── components
│   │   ├── core
│   │   │   ├── BlueprintBackground.tsx
│   │   │   ├── CelestialCanvas.tsx
│   │   │   ├── ClientEffectsWrapper.tsx
│   │   │   ├── CommandPalette.tsx
│   │   │   ├── CustomCursor.tsx
│   │   │   ├── Footer.tsx
│   │   │   ├── GlitchingIcosahedron.tsx
│   │   │   ├── GlobeCanvas.tsx
│   │   │   ├── GridBackground.tsx
│   │   │   ├── Header.tsx
│   │   │   ├── HeroBackground.tsx
│   │   │   ├── HologramGlobe.tsx
│   │   │   ├── HologramGlobeModel.tsx
│   │   │   ├── IcosahedronScene.tsx
│   │   │   ├── Navbar.tsx
│   │   │   ├── PageContent.tsx
│   │   │   ├── PremiumImageDisplay.tsx
│   │   │   ├── PremiumScrollIndicator.tsx
│   │   │   ├── ProjectNavigation.tsx
│   │   │   ├── ResumeViewer.tsx
│   │   │   ├── SkillOrb.tsx
│   │   │   └── SmoothScroller.tsx
│   │   └── sections
│   │       ├── About.tsx
│   │       ├── Contact.tsx
│   │       ├── Education.tsx
│   │       ├── Hero.tsx
│   │       ├── Packages.tsx
│   │       ├── Projects.tsx
│   │       └── Testimonials.tsx
│   ├── contexts
│   │   ├── LoadingContext.tsx
│   │   ├── ResumeViewerContext.tsx
│   │   └── ThemeContext.tsx
│   ├── hooks
│   │   ├── useIsWebKit.ts
│   │   └── useMediaQuery.ts
│   └── lib
│       └── data.ts
├── tailwind.config.ts
└── tsconfig.json



=============== 📄 SOURCE CODE & FILES ===============


--- FILE: .vercel/project.json ---
{"projectId":"prj_TMEk08yBtpvyzJuAneh7SrA0Dp5L","orgId":"team_wQKyFxErk9MFDtjpjMbLwkhV","projectName":"zainkhalid"}

--- END OF FILE: .vercel/project.json ---


--- FILE: eslint.config.mjs ---
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


--- END OF FILE: eslint.config.mjs ---


--- FILE: lighthouserc.js ---
// lighthouserc.js -- NEW FILE

module.exports = {
  ci: {
    collect: {
      // This tells Lighthouse to start a local server and test against that
      startServerCommand: 'npm run start',
      url: ['http://localhost:3000'],
      numberOfRuns: 2, // Run twice to get more stable numbers
    },
    assert: {
      // This sets the performance "budget". The build will fail if any of these
      // scores drop below the specified value. Start with reasonable numbers
      // and increase them as you optimize further.
      assertions: {
        'categories:performance': ['warn', { minScore: 0.9 }],
        'categories:accessibility': ['error', { minScore: 0.95 }],
        'categories:best-practices': ['error', { minScore: 0.95 }],
        'categories:seo': ['error', { minScore: 1 }],
      },
    },
    upload: {
      target: 'temporary-public-storage', // Uploads report to a temporary URL
    },
  },
};

--- END OF FILE: lighthouserc.js ---


--- FILE: next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


--- END OF FILE: next-env.d.ts ---


--- FILE: next.config.ts ---
import type { NextConfig } from "next";

const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
});

const nextConfig: NextConfig = {
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
};

// --- Step 2: Wrap your config with the analyzer ---
export default withBundleAnalyzer(nextConfig);

--- END OF FILE: next.config.ts ---


--- FILE: package.json ---
{
  "name": "zain-khalid-portfolio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint",
  "build:analyze": "ANALYZE=true next build",
  "lhci:install": "npm install -g @lhci/cli",
  "lhci:build": "npm run build",
  "lhci:run": "lhci autorun"
},
  "dependencies": {
    "@react-three/drei": "^10.7.2",
    "@react-three/fiber": "^9.3.0",
    "@studio-freight/lenis": "^1.0.42",
    "d3-geo": "^3.1.1",
    "gsap": "^3.13.0",
    "lucide-react": "^0.539.0",
    "next": "15.4.6",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-email": "^4.2.8",
    "react-hot-toast": "^2.6.0",
    "react-icons": "^5.5.0",
    "resend": "^6.0.1",
    "split-type": "^0.3.4",
    "three": "^0.179.1",
    "zod": "^4.1.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@lhci/cli": "^0.15.1",
    "@next/bundle-analyzer": "^15.5.0",
    "@types/d3-geo": "^3.1.0",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.4.6",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.1",
    "typescript": "^5",
    "vercel": "^46.0.3"
  }
}


--- END OF FILE: package.json ---


--- FILE: postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--- END OF FILE: postcss.config.js ---


--- FILE: public/file.svg ---
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

--- END OF FILE: public/file.svg ---


--- FILE: public/globe.svg ---
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

--- END OF FILE: public/globe.svg ---


--- FILE: public/next.svg ---
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

--- END OF FILE: public/next.svg ---


--- FILE: public/vercel.svg ---
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

--- END OF FILE: public/vercel.svg ---


--- FILE: public/window.svg ---
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

--- END OF FILE: public/window.svg ---


--- FILE: README.md ---
# Zain Khalid - Full-Stack Portfolio (MyPortfolio)

<p align="center">
  <a href="https://myportfolio-zainnextdev.vercel.app/" target="_blank">
    <img src="https://raw.githubusercontent.com/zainnextdev/MyPortfolio/main/public/og-image.png" alt="Zain Khalid Portfolio Banner" />
  </a>
</p>

<p align="center">
  <!-- Vercel Deployment Badge -->
  <a href="https://zainkhalid.vercel.app/" target="_blank">
    <img src="https://img.shields.io/badge/Status-Deployed%20on%20Vercel-black?style=for-the-badge&logo=vercel" alt="Deployment Status" />
  </a>
  <!-- License Badge -->
  <a href="https://github.com/zainnextdev/MyPortfolio/blob/main/LICENSE" target="_blank">
    <img src="https://img.shields.io/github/license/zainnextdev/MyPortfolio?style=for-the-badge&color=00F5D4" alt="License" />
  </a>
</p>

This repository contains the source code for my personal portfolio. It's an immersive showcase of modern web architecture and interactive design, built from the ground up with a focus on elite performance, stunning visuals, and a fluid user experience.

**Live Site:** [**https://zainkhalid.vercel.app/**](https://zainkhalid.vercel.app/)

---

## 🛠️ Tech Stack & Architecture

| Category              | Technology                                                                                                                                                                                                                                                                                     |
| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Core Framework**    | [**Next.js 15**](https://nextjs.org/) (App Router), [**React 19**](https://react.dev/)                                                                                                                                                                                                           |
| **Language**          | [**TypeScript**](https://www.typescriptlang.org/)                                                                                                                                                                                                                                              |
| **Styling**           | [**Tailwind CSS**](https://tailwindcss.com/) with a custom, themeable design system.                                                                                                                                                                                                             |
| **Animation**         | [**GSAP (GreenSock)**](https://greensock.com/gsap/) for high-performance timeline animations & [**Three.js**](https://threejs.org/) with [**React Three Fiber**](https://docs.pmnd.rs/react-three-fiber/getting-started/introduction) for interactive 3D graphics. |
| **Backend & API**     | [**Next.js API Routes**](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), [**Resend**](https://resend.com/) for email delivery, [**Zod**](https://zod.dev/) for server-side validation. |
| **Deployment**        | [**Vercel**](https://vercel.com/) (Global Edge Network, Instant CI/CD)                                                                                                                                                                                                                         |

---

## ✨ Key Features

-   **Interactive 3D Graphics:** Engaging visuals built with Three.js and React Three Fiber.
-   **Advanced GSAP Animations:** Complex, scroll-triggered, and physics-based animations.
-   **Command Palette:** A `Ctrl+K` interface for quick navigation and actions.
-   **Multi-Theme System:** Seamlessly switch between distinct visual themes.
-   **Custom Cursor & Smooth Scrolling:** For a premium, fluid browsing experience.
-   **Secure API Endpoint:** A robust API route for the contact form with strong validation.

---

## 🚀 Getting Started Locally

1.  **Clone the repository:**
    ```bash
    git clone https://github.com/zainnextdev/MyPortfolio.git
    cd MyPortfolio
    ```

2.  **Install dependencies:**
    ```bash
    npm install
    ```

3.  **Set up environment variables:**
    Create a file named `.env.local` in the project root and add your Resend API key:
    ```env
    RESEND_API_KEY=your_resend_api_key_here
    ```

4.  **Run the development server:**
    ```bash
    npm run dev
    ```
    Open [http://localhost:3000](http://localhost:3000) in your browser.

---

## 📄 License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.


--- END OF FILE: README.md ---


--- FILE: snapshot.mjs ---
// create_snapshot.mjs

import fs from 'fs/promises';
import path from 'path';

// --- CONFIGURATION ---
const ROOT_DIRECTORY = '.';
const OUTPUT_FILE = 'portfolio_snapshot.txt';

// Files and directories to explicitly ignore.
const IGNORE_PATTERNS = [
  'node_modules',
  '.git',
  '.next',
  'out',
  'dist',
  'build',
  '.vscode',
  '.idea',
  'pnpm-lock.yaml',
  'package-lock.json',
  'yarn.lock',
  '.env',
  '.env.local',
  '.env.production',
  '.env.development',
  'public/images', // Example: Ignore image assets
  'public/fonts',  // Example: Ignore font assets
  OUTPUT_FILE
];

// File extensions to include in the content dump.
const INCLUDE_EXTENSIONS = [
  '.js', '.ts', '.jsx', '.tsx', // Scripts
  '.json',                       // Configs
  '.scss', '.css', '.module.scss', // Styles
  '.md', '.mdx',                 // Documentation
  '.mjs', '.cjs',                // JS Modules
  '.svg'                         // Include SVGs as they are often used as components
];

// --- SCRIPT LOGIC ---

// A Set for quick lookup of ignored paths.
const ignoreSet = new Set(IGNORE_PATTERNS);

async function generateSnapshot() {
  console.log('🚀 Starting to generate project snapshot...');
  try {
    // Clear the output file if it exists, or create it.
    await fs.writeFile(OUTPUT_FILE, '');

    // 1. Write a header
    await appendToOutput(`--- Portfolio Snapshot: Zain Khalid ---`);
    await appendToOutput(`--- Generated on: ${new Date().toUTCString()} ---\n`);

    // 2. Add critical configuration files first for context
    await appendToOutput(`\n\n=============== 📌 CRITICAL CONFIG FILES ===============\n`);
    const criticalFiles = ['package.json', 'tsconfig.json', 'next.config.mjs', 'next.config.js', 'postcss.config.js', 'tailwind.config.js'];
    for (const file of criticalFiles) {
      try {
        const content = await fs.readFile(path.join(ROOT_DIRECTORY, file), 'utf-8');
        await appendToOutput(`\n--- FILE: ${file} ---\n`);
        await appendToOutput(content);
        await appendToOutput(`\n--- END OF FILE: ${file} ---\n`);
      } catch (error) {
        // File might not exist (e.g., no tailwind.config.js), which is fine.
        if (error.code !== 'ENOENT') {
            console.warn(`⚠️  Could not read critical file: ${file}`);
        }
      }
    }

    // 3. Generate and append the directory tree
    await appendToOutput(`\n\n=============== 🌳 DIRECTORY STRUCTURE ===============\n`);
    const tree = await generateTree(ROOT_DIRECTORY, '');
    await appendToOutput(tree);

    // 4. Append the content of all other relevant files
    await appendToOutput(`\n\n=============== 📄 SOURCE CODE & FILES ===============\n`);
    await processDirectory(ROOT_DIRECTORY);

    console.log(`✅ Success! Project snapshot saved to ${OUTPUT_FILE}`);

  } catch (error) {
    console.error('❌ An error occurred while generating the snapshot:', error);
  }
}

async function appendToOutput(content) {
  await fs.appendFile(OUTPUT_FILE, content + '\n');
}

async function generateTree(dir, prefix) {
  let treeString = '';
  try {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    const filteredEntries = entries.filter(entry => !ignoreSet.has(entry.name));

    for (const [index, entry] of filteredEntries.entries()) {
      const connector = index === filteredEntries.length - 1 ? '└── ' : '├── ';
      treeString += `${prefix}${connector}${entry.name}\n`;
      if (entry.isDirectory()) {
        const newPrefix = prefix + (index === filteredEntries.length - 1 ? '    ' : '│   ');
        treeString += await generateTree(path.join(dir, entry.name), newPrefix);
      }
    }
  } catch (error) {
    // Ignore errors for directories we can't read (e.g., permissions)
  }
  return treeString;
}

async function processDirectory(dir) {
  try {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      if (ignoreSet.has(entry.name)) {
        continue;
      }

      if (entry.isDirectory()) {
        await processDirectory(fullPath);
      } else if (entry.isFile() && INCLUDE_EXTENSIONS.includes(path.extname(entry.name))) {
        try {
          const content = await fs.readFile(fullPath, 'utf-8');
          await appendToOutput(`\n--- FILE: ${fullPath.replace(/\\/g, '/')} ---`);
          await appendToOutput(content);
          await appendToOutput(`\n--- END OF FILE: ${fullPath.replace(/\\/g, '/')} ---\n`);
        } catch (readError) {
          console.warn(`⚠️  Could not read file: ${fullPath}`);
        }
      }
    }
  } catch (error) {
    // Ignore errors for directories we can't read
  }
}

// Run the main function
generateSnapshot();

--- END OF FILE: snapshot.mjs ---


--- FILE: src/app/api/send/route.ts ---
// src/app/api/send/route.ts -- FINAL, COMPLETE & FULLY FUNCTIONAL VERSION
import { NextResponse } from 'next/server';
import { Resend } from 'resend';
import { z } from 'zod';

// Check for the API key at startup. If it's missing, the server will log a clear error.
if (!process.env.RESEND_API_KEY) {
  console.error("FATAL ERROR: RESEND_API_KEY environment variable is not set.");
}
const resend = new Resend(process.env.RESEND_API_KEY);

// Zod schema for strong, type-safe validation of the request body.
const contactFormSchema = z.object({
  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),
  email: z.string().email({ message: 'A valid email address is required.' }),
  message: z.string().min(5, { message: 'Message must be at least 5 characters.' }),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const parsed = contactFormSchema.safeParse(body);

    // If validation fails, return a detailed error message.
    if (!parsed.success) {
      const errorMessages = parsed.error.issues.map(issue => issue.message).join(' ');
      return NextResponse.json({ error: `Invalid input: ${errorMessages}` }, { status: 400 });
    }

    const { name, email, message } = parsed.data;

    const { data, error } = await resend.emails.send({
      // CRITICAL: For new Resend accounts, the 'from' address MUST be 'onboarding@resend.dev'.
      from: 'Zain Khalid Portfolio <onboarding@resend.dev>',
      to: ['zain.nextdev@gmail.com'], // Your destination email address
      subject: `New Portfolio Message from ${name}`,
      replyTo: email, // Set the user's email as the reply-to address
      html: `<div style="font-family: Arial, sans-serif; line-height: 1.6;"><h2>New Message via Portfolio</h2><p><strong>Name:</strong> ${name}</p><p><strong>Email:</strong> <a href="mailto:${email}">${email}</a></p><hr><h3>Message:</h3><p>${message.replace(/\n/g, '<br>')}</p></div>`,
    });

    // If Resend returns an error, forward its specific message.
    if (error) {
      console.error('Resend API Error:', error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }
    
    // On success, return a success message.
    return NextResponse.json({ message: 'Message sent successfully!' });
  } catch (error: any) {
    // Catch any other unexpected errors.
    console.error('API Route Error:', error);
    return NextResponse.json({ error: error.message || 'An unexpected error occurred.' }, { status: 500 });
  }
}

--- END OF FILE: src/app/api/send/route.ts ---


--- FILE: src/app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

/* --- THEME DEFINITIONS --- */
@layer base {
  :root, [data-theme='obsidian'] {
    --color-background: 0 0 0; /* #000000 */
    --color-surface: 17 17 17; /* #111111 */
    --color-primary: 234 234 234; /* #EAEAEA */
    --color-secondary: 136 136 136; /* #888888 */
    --color-accent: 0 245 212; /* #00F5D4 */
    --color-accent-hover: 0 196 169; /* #00C4A9 */
    --color-spotlight: 0 245 212; /* Teal for dark themes */
  }

  [data-theme='marble'] {
    --color-background: 250 250 250; /* #FAFAFA - A soft, natural off-white */
    --color-surface: 255 255 255;    /* #FFFFFF - Kept pure white for elevated surfaces */
    --color-primary: 28 28 28;      /* #1C1C1C - A softer, charcoal black for text */
    --color-secondary: 115 115 115; /* #737373 - A legible, complementary mid-gray */
    --color-accent: 0 245 212;      /* #00F5D4 - Accent remains vibrant for brand consistency */
    --color-accent-hover: 0 196 169;/* #00C4A9 */
    --color-spotlight: 28 28 28; /* Subtle charcoal for light theme */
  }

  [data-theme='blueprint'] {
    --color-background: 13 23 42; /* #0D172A - A deep navy */
    --color-surface: 22 36 61; /* #16243D */
    --color-primary: 234 234 234; /* #EAEAEA */
    --color-secondary: 125 144 179; /* #7D90B3 */
    --color-accent: 0 245 212; /* #00F5D4 */
    --color-accent-hover: 0 196 169; /* #00C4A9 */
    --color-spotlight: 0 245 212; /* Teal for dark themes */
  }
}

html {
  --scroll-velocity: 0;
}

/* Only hide the default cursor on devices with a fine pointer (e.g., a mouse) */
@media (pointer: fine) {
  body, a, button, [data-cursor-hover] {
    cursor: none !important;
  }

  /* --- ADDITION: New global utility rule --- */
  /* Any element with this attribute, and ALL of its children, will hide the default cursor */
  [data-force-hide-cursor], [data-force-hide-cursor] * {
    cursor: none !important;
  }
}

/* --- OPTIMIZATION 3: CSS for Initial Animation States --- */
/* This ensures text is hidden before GSAP runs, preventing flicker */
.char-reveal-wrapper {
  display: inline-block;
  overflow: hidden;
  vertical-align: bottom; /* Aligns characters correctly */
}
.char-reveal-inner {
  display: inline-block;
  visibility: hidden; /* Use visibility to keep layout space */
}
/* --- ADDITION: The Guaranteed Rendering Fix --- */
/* This utility forces an element onto its own compositing layer, fixing
   bg-clip-text rendering bugs in Chrome when animating child elements. */
.force-render-context {
  transform: translateZ(0);
}

.will-change-transform {
  will-change: transform, opacity;
}

--- END OF FILE: src/app/globals.css ---


--- FILE: src/app/layout.tsx ---
// src/app/layout.tsx -- MODIFIED FOR PERFORMANCE

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from '@/contexts/ThemeContext';
import { ResumeViewerProvider } from "@/contexts/ResumeViewerContext"; 
import SmoothScroller from "@/components/core/SmoothScroller";
import Navbar from "@/components/core/Navbar";
import { Toaster } from "react-hot-toast";
import CommandPalette from "@/components/core/CommandPalette";
import Footer from "@/components/core/Footer";
import Header from "@/components/core/Header";
import ClientEffectsWrapper from "@/components/core/ClientEffectsWrapper";

// NOTE: The heavy, always-on components have been removed from this global layout.
// import CustomCursor from "@/components/core/CustomCursor"; // REMOVED
// import { CelestialCanvas } from "@/components/core/CelestialCanvas"; // REMOVED

const inter = Inter({ subsets: ["latin"] });

const liveUrl = "https://zainkhalid.vercel.app";

// --- Metadata remains unchanged, it is already well-configured ---
export const metadata: Metadata = {
  title: {
    default: "Zain Khalid | Full-Stack Architect & Next.js Specialist",
    template: "%s | Zain Khalid",
  },
  description: "The official portfolio of Zain Khalid, a full-stack architect from Lahore, Pakistan, specializing in building high-performance, visually stunning web experiences with the Next.js and Vercel ecosystem.",
  verification: {
    google: 'HwbZ9SEhNLkYaoxLskIGB11QX6tvZ5Ob3PawkTqGkLU',
  },
  metadataBase: new URL(liveUrl),
  // ... rest of metadata object is unchanged and correct
  keywords: ["Zain Khalid", "Full-Stack Developer", "Next.js Developer", "React Developer", "TypeScript", "Vercel", "Portfolio", "Web Developer Pakistan", "Lahore Developer", "Three.js", "GSAP"],
  authors: [{ name: "Zain Khalid", url: liveUrl }],
  creator: "Zain Khalid",
  alternates: {
    canonical: '/',
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
  openGraph: {
    title: "Zain Khalid | Full-Stack Architect & Next.js Specialist",
    description: "Architecting high-performance, visually stunning web experiences.",
    url: liveUrl,
    siteName: "Zain Khalid",
    images: [{ url: `${liveUrl}/og-image.png`, width: 1200, height: 630, alt: "Zain Khalid Portfolio", }],
    locale: 'en_US',
    type: 'website',
  },
  twitter: {
    card: 'summary_large_image',
    title: "Zain Khalid | Full-Stack Architect & Next.js Specialist",
    description: "Architecting high-performance, visually stunning web experiences.",
    creator: "@zain_nextdev",
    images: [`${liveUrl}/og-image.png`],
  },
  icons: { icon: '/favicon.ico', shortcut: '/favicon-16x16.png', apple: '/apple-touch-icon.png', },
  manifest: `${liveUrl}/site.webmanifest`,
};

const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'Person',
  name: 'Zain Khalid',
  url: liveUrl,
  image: `${liveUrl}/zain-khalid-portrait.png`, 
  jobTitle: 'Full-Stack Architect & Next.js Specialist',
  worksFor: {
    '@type': 'Organization',
    name: 'Freelance',
  },
  alumniOf: [
    { '@type': 'CollegeOrUniversity', name: 'University of Engineering & Technology, Lahore' },
    { '@type': 'CollegeOrUniversity', name: 'Punjab Group of Colleges, Lahore' }
  ],
  sameAs: [
    'https://github.com/zainnextdev',
    'https://www.linkedin.com/in/zain-khalid-b91873318/',
  ],
  knowsAbout: [ "Next.js", "React.js", "TypeScript", "PostgreSQL", "Supabase", "Vercel", "System Architecture", "UI/UX Design", "SEO", "Three.js", "GSAP" ],
  address: {
    '@type': 'PostalAddress',
    addressLocality: 'Lahore',
    addressCountry: 'PK',
  },
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}
        />
      </head>
      <body className={`${inter.className} bg-background text-primary antialiased`}>
        <ThemeProvider>
          <ResumeViewerProvider>
            {/* --- Step 2: Add the wrapper component here --- */}
            <ClientEffectsWrapper />

            <Toaster position="bottom-center" toastOptions={{ style: { background: '#111111', color: '#EAEAEA', border: '1px solid rgba(136, 136, 136, 0.2)', }, }} />
            <Navbar />
            <Header /> 
            <SmoothScroller />
            <div className="scroll-container">
              <main className="pt-20 md:pt-20 md:pl-20">
                {children}
              </main>
              <Footer />
            </div>
            <CommandPalette />
          </ResumeViewerProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}

--- END OF FILE: src/app/layout.tsx ---


--- FILE: src/app/not-found.tsx ---
// src/app/not-found.tsx
"use client";

import React, { useEffect, useRef } from 'react';
import Link from 'next/link';
import gsap from 'gsap';
import { GlitchingIcosahedron } from '@/components/core/GlitchingIcosahedron';
import { Home } from 'lucide-react';

export default function NotFound() {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const ctx = gsap.context(() => {
      const tl = gsap.timeline({ delay: 0.1 });
      tl.fromTo('.stagger-reveal', 
        { y: 50, autoAlpha: 0 },
        { y: 0, autoAlpha: 1, stagger: 0.15, duration: 0.8, ease: 'power3.out' }
      );
    }, containerRef);
    return () => ctx.revert();
  }, []);

  return (
    <main 
      ref={containerRef}
      className="relative min-h-screen flex flex-col items-center justify-center text-center px-4 overflow-hidden"
    >
      <GlitchingIcosahedron />

      <h1 
        className="stagger-reveal text-7xl md:text-9xl font-black tracking-tighter bg-gradient-to-r from-primary via-secondary to-primary bg-clip-text text-transparent"
        data-cursor-text
      >
        404
      </h1>
      
      <h2 
        className="stagger-reveal text-xl md:text-3xl font-bold tracking-tight text-primary mt-4"
        data-cursor-text
      >
        Lost in the Cosmos
      </h2>

      <p 
        className="stagger-reveal text-secondary max-w-md mt-4"
        data-cursor-text
      >
        The page you are looking for does not exist or has been moved to a new coordinate in the digital universe.
      </p>

      <div className="stagger-reveal mt-12">
        <Link href="/" data-cursor-hover>
          <span className="group relative inline-flex items-center justify-center gap-3 overflow-hidden rounded-full bg-surface/50 px-8 py-4 text-lg font-medium text-primary shadow-lg transition-all duration-300 hover:border-accent hover:shadow-[0_0_20px_theme(colors.accent)] border border-secondary/20 backdrop-blur-sm">
            <Home className="transition-transform duration-300 group-hover:-translate-y-1" />
            <span>Return to Home Base</span>
          </span>
        </Link>
      </div>
    </main>
  );
}

--- END OF FILE: src/app/not-found.tsx ---


--- FILE: src/app/page.tsx ---
// src/app/page.tsx -- MODIFIED FOR SEMANTICS

import PageContent from "@/components/core/PageContent";

export default function Home() {
  // The <main> tag should wrap the primary content of the page.
  return (
    <main>
      <PageContent />
    </main>
  );
}

--- END OF FILE: src/app/page.tsx ---


--- FILE: src/app/robots.ts ---
// src/app/robots.ts -- NEW FILE

import { MetadataRoute } from 'next';

// This function generates the robots.txt file.
export default function robots(): MetadataRoute.Robots {
  const siteUrl = 'https://zainkhalid.vercel.app';

  return {
    rules: {
      userAgent: '*', // Rule applies to all web crawlers
      allow: '/',     // Allow crawling of all pages starting from the root
      disallow: '/api/', // Disallow crawling of the API routes
    },
    sitemap: `${siteUrl}/sitemap.xml`, // Location of your sitemap
  };
}

--- END OF FILE: src/app/robots.ts ---


--- FILE: src/app/sitemap.ts ---
// src/app/sitemap.ts -- NEW FILE

import { MetadataRoute } from 'next';

// This function generates the sitemap.xml file.
export default function sitemap(): MetadataRoute.Sitemap {
  const siteUrl = 'https://zainkhalid.vercel.app';

  // For a single-page portfolio, we only need to list the main URL.
  // If you add a blog or other pages later, you would add them to this array.
  return [
    {
      url: siteUrl,
      lastModified: new Date().toISOString(), // Automatically set to the build date
      changeFrequency: 'monthly', // How often the content is likely to change
      priority: 1, // The priority of this URL relative to other URLs on your site (1.0 is highest)
    },
  ];
}

--- END OF FILE: src/app/sitemap.ts ---


--- FILE: src/components/core/BlueprintBackground.tsx ---


--- END OF FILE: src/components/core/BlueprintBackground.tsx ---


--- FILE: src/components/core/CelestialCanvas.tsx ---
"use client";

import { useEffect, useRef } from "react";

export function CelestialCanvas() {
  const canvasRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handler = (e: PointerEvent) => {
      if (canvasRef.current) {
        const { clientX, clientY } = e;
        canvasRef.current.style.setProperty("--x", `${clientX}px`);
        canvasRef.current.style.setProperty("--y", `${clientY}px`);
      }
    };
    window.addEventListener("pointermove", handler);
    return () => window.removeEventListener("pointermove", handler);
  }, []);

  return (
    <div
      ref={canvasRef}
      className="fixed inset-0 -z-10 h-screen w-screen"
      style={
        {
          "--x": "50vw",
          "--y": "50vh",

          // --- The Base Layers: Nebula & Starfield ---
          // They are always visible.
          background: `
            /* Layer 1: Parallax Stardust (Small) */
            radial-gradient(circle at 10% 20%, rgba(234, 234, 234, 0.08) 1px, transparent 1px),
            radial-gradient(circle at 80% 90%, rgba(234, 234, 234, 0.08) 1px, transparent 1px),
            /* Layer 2: Parallax Stardust (Medium) */
            radial-gradient(circle at 40% 50%, rgba(234, 234, 234, 0.06) 2px, transparent 2px),
            radial-gradient(circle at 90% 10%, rgba(234, 234, 234, 0.06) 2px, transparent 2px),
            /* Layer 3: The Living Nebula (Animated) */
            radial-gradient(ellipse at 20% 80%, rgba(0, 245, 212, 0.08), transparent 50%),
            radial-gradient(ellipse at 70% 10%, rgba(0, 245, 212, 0.08), transparent 50%)
          `,
          backgroundSize: `
            64px 64px,
            64px 64px,
            32px 32px,
            32px 32px,
            100% 100%,
            100% 100%
          `,
          // Apply the subtle pan animation to the nebula layers
          animation: "subtle-pan 120s linear infinite",
        } as React.CSSProperties
      }
    >
      {/* --- The Interactive Spotlight Layer --- */}
      {/* This div sits on top and creates the revealing effect. */}
      <div
        className="absolute inset-0 h-full w-full"
        style={{
          background: `
            radial-gradient(
              circle at var(--x) var(--y),
              transparent 0%,
              rgba(0, 0, 0, 0.95) 350px
            )
          `,
        }}
      />
    </div>
  );
}

--- END OF FILE: src/components/core/CelestialCanvas.tsx ---


--- FILE: src/components/core/ClientEffectsWrapper.tsx ---
// src/components/core/ClientEffectsWrapper.tsx -- NEW FILE

"use client";

import { useMediaQuery } from "@/hooks/useMediaQuery";
import CustomCursor from "@/components/core/CustomCursor";
import { CelestialCanvas } from "@/components/core/CelestialCanvas";

export default function ClientEffectsWrapper() {
  // We'll consider "desktop" to be screens wider than 1024px.
  // This is a common breakpoint where devices have both the screen real estate
  // and the processing power for these effects.
  const isDesktop = useMediaQuery('(min-width: 1024px)');

  // Only render these expensive components on the client side for desktop users.
  // For mobile users, this component renders nothing, saving massive resources.
  if (isDesktop) {
    return (
      <>
        <CelestialCanvas />
        <CustomCursor />
      </>
    );
  }

  // Return null for non-desktop environments
  return null;
}

--- END OF FILE: src/components/core/ClientEffectsWrapper.tsx ---


--- FILE: src/components/core/CommandPalette.tsx ---
// src/components/core/CommandPalette.tsx
"use client";

import React, { useState, useEffect, useRef, useCallback } from 'react';
import gsap from 'gsap';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin';
import { useTheme } from '@/contexts/ThemeContext';
// --- Step 1: Import the new context hook ---
import { useResumeViewer } from '@/contexts/ResumeViewerContext';
import { 
  Search, Home, Layers3, GraduationCap, LayoutGrid, MessageSquareQuote, 
  ClipboardCheck, ArrowUpRight, FileText, Mail, Phone, Brush 
} from 'lucide-react';
import { startLenis, stopLenis } from './SmoothScroller';

gsap.registerPlugin(ScrollToPlugin);

// --- Step 2: Add the new 'resume' action type ---
type CommandAction = 
  | { type: 'scroll', payload: string }
  | { type: 'link', payload: string }
  | { type: 'theme', payload: 'obsidian' | 'marble' | 'blueprint' }
  | { type: 'resume' }; // New action type for the viewer

type Command = {
  label: string;
  action: CommandAction;
  icon: React.ReactElement;
};

type CommandGroup = {
  section: string;
  items: Command[];
};

const commandItems: CommandGroup[] = [
  { section: 'Navigation', items: [
    { label: 'Home', action: { type: 'scroll', payload: '#hero' }, icon: <Home size={20} /> },
    { label: 'About & Skills', action: { type: 'scroll', payload: '#about' }, icon: <Layers3 size={20} /> },
    { label: 'Academic Journey', action: { type: 'scroll', payload: '#education' }, icon: <GraduationCap size={20} /> },
    { label: 'Curated Work', action: { type: 'scroll', payload: '#projects' }, icon: <LayoutGrid size={20} /> },
    { label: 'Client Reviews', action: { type: 'scroll', payload: '#testimonials' }, icon: <MessageSquareQuote size={20} /> },
    { label: 'My Packages', action: { type: 'scroll', payload: '#packages' }, icon: <ClipboardCheck size={20} /> },
    { label: 'Contact', action: { type: 'scroll', payload: '#contact' }, icon: <ArrowUpRight size={20} /> },
  ]},
  { section: 'Actions', items: [
    // --- Step 3: Update the command's action from 'link' to 'resume' ---
    { label: 'View Résumé', action: { type: 'resume' }, icon: <FileText size={20} /> },
    { label: 'Send Email', action: { type: 'link', payload: 'mailto:zain.nextdev@gmail.com' }, icon: <Mail size={20} /> },
    { label: 'Text Me', action: { type: 'link', payload: 'https://wa.me/923236748502' }, icon: <Phone size={20} /> },
  ]},
  { section: 'Change Theme', items: [
      { label: 'Set Theme: Obsidian', action: { type: 'theme', payload: 'obsidian' }, icon: <Brush size={20} /> },
      { label: 'Set Theme: Marble', action: { type: 'theme', payload: 'marble' }, icon: <Brush size={20} /> },
      { label: 'Set Theme: Blueprint', action: { type: 'theme', payload: 'blueprint' }, icon: <Brush size={20} /> },
  ]}
];

const allCommands: Command[] = commandItems.flatMap(group => group.items);

const CommandPalette = () => {
  const [isMounted, setIsMounted] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [query, setQuery] = useState('');
  const [activeIndex, setActiveIndex] = useState(0);
  
  const paletteRef = useRef<HTMLDivElement>(null);
  const overlayRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const listRef = useRef<HTMLUListElement>(null);

  const { setTheme } = useTheme();
  // --- Step 4: Initialize the resume viewer hook ---
  const { openResume } = useResumeViewer();

  const filteredCommands = query
    ? allCommands.filter(item => item.label.toLowerCase().includes(query.toLowerCase()))
    : allCommands;

  useEffect(() => {
    setIsMounted(true);
  }, []);

  // --- Step 5: Update the command execution logic ---
  const executeCommand = useCallback((command: Command) => {
    setIsOpen(false); 
    // Timeout allows the palette closing animation to begin before the new action starts
    setTimeout(() => {
      const { action } = command;
      if (action.type === 'scroll') {
        gsap.to(window, { duration: 1.5, scrollTo: { y: action.payload, offsetY: 0 }, ease: 'power3.inOut' });
      } else if (action.type === 'link') {
        window.open(action.payload, '_blank');
      } else if (action.type === 'theme') {
        setTheme(action.payload);
      } else if (action.type === 'resume') {
        openResume();
      }
    }, 150);
  // --- Step 6: Add openResume to the dependency array ---
  }, [setTheme, openResume]);

  // ... (No other changes are needed below this line) ...

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault();
        setIsOpen(prev => !prev);
        return;
      }
      
      if (isOpen) {
        if (e.key === 'Escape') setIsOpen(false);
        else if (e.key === 'ArrowDown') {
          e.preventDefault();
          setActiveIndex(prev => (prev + 1) % (filteredCommands.length || 1));
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          setActiveIndex(prev => (prev - 1 + (filteredCommands.length || 1)) % (filteredCommands.length || 1));
        } else if (e.key === 'Enter') {
          e.preventDefault();
          if (filteredCommands[activeIndex]) executeCommand(filteredCommands[activeIndex]);
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isOpen, activeIndex, filteredCommands, executeCommand]);

  useEffect(() => {
    if (isOpen) {
      stopLenis();
      gsap.to(overlayRef.current, { autoAlpha: 1, duration: 0.3 });
      gsap.fromTo(paletteRef.current, 
        { autoAlpha: 0, scale: 0.98, y: -20 },
        { autoAlpha: 1, scale: 1, y: 0, duration: 0.3, ease: 'power3.out', delay: 0.1 }
      );
      setTimeout(() => inputRef.current?.focus(), 150);
    } else {
      startLenis();
      gsap.to(paletteRef.current, { autoAlpha: 0, scale: 0.98, y: -20, duration: 0.2, ease: 'power2.in' });
      gsap.to(overlayRef.current, { autoAlpha: 0, duration: 0.2, delay: 0.1 });
      setQuery('');
      setActiveIndex(0);
    }
  }, [isOpen]);

  useEffect(() => {
    if (isOpen) listRef.current?.querySelector(`[data-index="${activeIndex}"]`)?.scrollIntoView({ block: 'nearest' });
  }, [activeIndex, isOpen]);

  useEffect(() => setActiveIndex(0), [query]);

  if (!isMounted) {
    return null;
  }

  return (
    <div 
      ref={overlayRef} 
      className="fixed inset-0 z-[9999] bg-background/60 backdrop-blur-sm invisible"
      style={{ pointerEvents: isOpen ? 'auto' : 'none' }}
      onMouseDown={() => setIsOpen(false)}
    >
      <div 
        ref={paletteRef} 
        className="invisible absolute top-[20vh] left-1/2 -translate-x-1/2 w-[90vw] max-w-2xl bg-surface/80 backdrop-blur-xl border border-secondary/10 rounded-xl shadow-2xl shadow-black/50 overflow-hidden"
        onMouseDown={e => e.stopPropagation()}
      >
        <div className="relative">
          <Search className="absolute top-1/2 -translate-y-1/2 left-4 text-secondary" size={20} />
          <input ref={inputRef} type="text" value={query} onChange={e => setQuery(e.target.value)} placeholder="Type a command or search..." className="w-full bg-transparent h-14 pl-12 pr-4 text-lg text-primary outline-none border-b border-secondary/10" />
        </div>
        <ul ref={listRef} className="max-h-[40vh] overflow-y-auto p-2">
          {query ? (
            filteredCommands.length > 0 ? (
              filteredCommands.map((item, index) => (
                <li key={`${item.label}-search-${index}`}><button data-index={index} onMouseMove={() => setActiveIndex(index)} onClick={() => executeCommand(item)} className={`w-full flex items-center gap-4 text-left p-3 rounded-md transition-colors duration-150 ${activeIndex === index ? 'bg-accent/20 text-accent' : 'text-secondary hover:bg-secondary/10 hover:text-primary'}`}>{item.icon} {item.label}</button></li>
              ))
            ) : (<li className="text-center p-8 text-secondary">No results found.</li>)
          ) : (
            commandItems.map(group => (
              <li key={group.section}><h3 className="text-xs text-secondary uppercase tracking-widest px-3 pt-4 pb-2">{group.section}</h3><ul>{group.items.map(item => {
                const flatIndex = allCommands.findIndex(cmd => cmd.label === item.label);
                return (<li key={item.label}><button data-index={flatIndex} onMouseMove={() => setActiveIndex(flatIndex)} onClick={() => executeCommand(item)} className={`w-full flex items-center gap-4 text-left p-3 rounded-md transition-colors duration-150 ${activeIndex === flatIndex ? 'bg-accent/20 text-accent' : 'text-secondary hover:bg-secondary/10 hover:text-primary'}`}>{item.icon} <span className="flex-1">{item.label}</span></button></li>);
              })}</ul></li>
            ))
          )}
        </ul>
        <div className="bg-background/50 border-t border-secondary/10 p-2 flex items-center justify-end text-xs text-secondary gap-3">
          <span>Navigate: <kbd className="font-sans bg-secondary/20 px-1.5 py-0.5 rounded">↑</kbd><kbd className="font-sans bg-secondary/20 px-1.5 py-0.5 rounded">↓</kbd></span>
          <span>Select: <kbd className="font-sans bg-secondary/20 px-1.5 py-0.5 rounded">↵</kbd></span>
          <span>Close: <kbd className="font-sans bg-secondary/20 px-1.5 py-0.5 rounded">esc</kbd></span>
        </div>
      </div>
    </div>
  );
};

export default CommandPalette;

--- END OF FILE: src/components/core/CommandPalette.tsx ---


--- FILE: src/components/core/CustomCursor.tsx ---
// src/components/core/CustomCursor.tsx
"use client";

import { useEffect, useRef } from 'react';
import gsap from 'gsap';

const CustomCursor = () => {
  const cursorDotRef = useRef<HTMLDivElement>(null);
  const cursorRingRef = useRef<HTMLDivElement>(null);
  const isFirstMove = useRef(true);

  useEffect(() => {
    if (window.matchMedia("(pointer: coarse)").matches) {
      if (cursorDotRef.current) cursorDotRef.current.style.display = 'none';
      if (cursorRingRef.current) cursorRingRef.current.style.display = 'none';
      return;
    }

    const dot = cursorDotRef.current;
    const ring = cursorRingRef.current;
    if (!dot || !ring) return;

    const mousePos = { x: 0, y: 0 };
    const previousMousePos = { x: 0, y: 0 };
    const velocity = { x: 0, y: 0 };

    const dotXTo = gsap.quickTo(dot, "x", { duration: 0.2, ease: "power3" });
    const dotYTo = gsap.quickTo(dot, "y", { duration: 0.2, ease: "power3" });
    const ringXTo = gsap.quickTo(ring, "x", { duration: 0.6, ease: "power3" });
    const ringYTo = gsap.quickTo(ring, "y", { duration: 0.6, ease: "power3" });

    // --- UPGRADE: Re-engineered hover timeline for a wider, softer bloom effect ---
    const hoverTimeline = gsap.timeline({ paused: true })
      .to(ring, { 
        scale: 3, // "Wider"
        borderColor: 'rgba(0, 245, 212, 0.4)', // "Softer" border color
        boxShadow: '0 0 25px rgba(0, 245, 212, 0.5)', // Adds the soft glow
        duration: 0.4,
        ease: 'power3.out'
      })
      .to(dot, { opacity: 0, duration: 0.4, ease: 'power3.out' }, 0);
    
    const textTimeline = gsap.timeline({ paused: true })
      .to(ring, { scaleX: 2.5, scaleY: 0.4, duration: 0.3 })
      .to(dot, { opacity: 0, duration: 0.3 }, 0);

    const handleMouseMove = (e: MouseEvent) => {
      mousePos.x = e.clientX;
      mousePos.y = e.clientY;
      if (isFirstMove.current) {
        gsap.to([dot, ring], { opacity: 1, duration: 0.3 });
        isFirstMove.current = false;
      }
    };

    const handleMouseDown = () => gsap.to(ring, { scale: 0.8, duration: 0.2 });
    const handleMouseUp = () => gsap.to(ring, { scale: 1, duration: 0.2 });

    const animate = () => {
      velocity.x = mousePos.x - previousMousePos.x;
      velocity.y = mousePos.y - previousMousePos.y;
      
      dotXTo(mousePos.x);
      dotYTo(mousePos.y);
      ringXTo(mousePos.x);
      ringYTo(mousePos.y);

      const speed = Math.sqrt(velocity.x**2 + velocity.y**2);
      const scale = gsap.utils.clamp(0, 0.3, speed / 200);
      const rotation = Math.atan2(velocity.y, velocity.x) * (180 / Math.PI);
      
      gsap.set(ring, { scaleX: 1 + scale, scaleY: 1 - scale, rotation: rotation });

      previousMousePos.x = mousePos.x;
      previousMousePos.y = mousePos.y;
      requestAnimationFrame(animate);
    };

    const setupHoverListeners = () => {
      document.querySelectorAll('[data-cursor-hover]').forEach(el => {
        el.addEventListener('mouseenter', () => hoverTimeline.play());
        el.addEventListener('mouseleave', () => hoverTimeline.reverse());
      });
      document.querySelectorAll('[data-cursor-text]').forEach(el => {
        el.addEventListener('mouseenter', () => textTimeline.play());
        el.addEventListener('mouseleave', () => textTimeline.reverse());
      });
    };

    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('mousedown', handleMouseDown);
    window.addEventListener('mouseup', handleMouseUp);
    
    setupHoverListeners();
    requestAnimationFrame(animate);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mousedown', handleMouseDown);
      window.removeEventListener('mouseup', handleMouseUp);
    };
  }, []);

  return (
    <>
      <div
        ref={cursorDotRef}
        className="fixed top-0 left-0 w-2 h-2 bg-primary rounded-full pointer-events-none -translate-x-1/2 -translate-y-1/2 z-[99999] opacity-0"
      />
      <div
        ref={cursorRingRef}
        className="fixed top-0 left-0 w-10 h-10 border-2 border-secondary rounded-full pointer-events-none -translate-x-1/2 -translate-y-1/2 z-[99999] opacity-0"
        style={{ transformOrigin: 'center center' }}
      />
    </>
  );
};

export default CustomCursor;

--- END OF FILE: src/components/core/CustomCursor.tsx ---


--- FILE: src/components/core/Footer.tsx ---
// src/components/core/Footer.tsx
"use client";

import React, { useEffect, useRef } from 'react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { FaGithub, FaLinkedinIn, FaDiscord, FaInstagram, FaFacebookF } from 'react-icons/fa';

gsap.registerPlugin(ScrollTrigger);

// --- MODIFIED: Twitter has been removed ---
const socialLinks = [
  { href: 'https://github.com/zainnextdev', label: 'GitHub', icon: <FaGithub size={18} /> },
  { href: 'https://www.linkedin.com/in/zain-khalid-dev/', label: 'LinkedIn', icon: <FaLinkedinIn size={18} /> },
  { href: 'https://discord.com/channels/1409482646089633794/1409482646718910468', label: 'Discord', icon: <FaDiscord size={18} /> },
  { href: 'https://www.instagram.com/zain.khalid__/', label: 'Instagram', icon: <FaInstagram size={18} /> },
];

const Footer = () => {
  const footerRef = useRef<HTMLElement>(null);

  useEffect(() => {
    const ctx = gsap.context(() => {
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: footerRef.current,
          start: 'top bottom', // Start animation as soon as the footer enters the viewport
          toggleActions: 'play none none reverse',
        }
      });

      // --- NEW, "INSANE" ANIMATION SEQUENCE ---
      // 1. The container fades in to avoid a hard pop
      tl.fromTo(footerRef.current, { autoAlpha: 0 }, { autoAlpha: 1, duration: 0.5 });
      
      // 2. The line draws itself from the center outwards
      tl.fromTo('.footer-line', 
        { scaleX: 0 },
        { scaleX: 1, duration: 1.2, ease: 'power3.out' },
        0.2 // Starts shortly after the fade-in
      );
      
      // 3. The content reveals with a subtle stagger, creating a feeling of precision
      tl.fromTo('.footer-content',
        { y: 20, autoAlpha: 0 },
        { y: 0, autoAlpha: 1, stagger: 0.1, duration: 0.8, ease: 'power3.out' },
        "-=0.8" // Overlaps with the line draw for a seamless effect
      );

    }, footerRef);
    return () => ctx.revert();
  }, []);

  return (
    <footer 
      ref={footerRef} 
      className="relative invisible py-8 px-4 sm:px-6 lg:px-8"
      data-force-hide-cursor
    >
      <div className="max-w-7xl mx-auto w-full relative">
        <div className="footer-line absolute top-1/2 left-0 w-full h-px bg-secondary/20 origin-center" />
        
        <div className="relative flex flex-col md:flex-row justify-between items-center gap-8 md:gap-0">
          <p className="footer-content text-secondary text-sm tracking-wider">
            &copy; {new Date().getFullYear()} Zain Khalid. Digital Architect.
          </p>

          <div className="footer-content flex items-center gap-3">
            {socialLinks.map(link => (
              <a
                key={link.label}
                href={link.href}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={link.label}
                data-cursor-hover
                className="group w-10 h-10 flex items-center justify-center bg-transparent border border-secondary/20 rounded-full transition-all duration-300 ease-in-out hover:border-accent/80 hover:-translate-y-1 hover:shadow-[0_10px_20px_-5px_theme(colors.accent/10)]"
              >
                <div className="text-secondary group-hover:text-accent transition-colors duration-300">
                  {link.icon}
                </div>
              </a>
            ))}
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

--- END OF FILE: src/components/core/Footer.tsx ---


--- FILE: src/components/core/GlitchingIcosahedron.tsx ---
// src/components/core/GlitchingIcosahedron.tsx -- RE-ENGINEERED, RHYTHMIC & BUG-FREE VERSION
"use client";

import { Canvas, useFrame } from "@react-three/fiber";
import { Edges } from "@react-three/drei";
import { useRef } from "react";
import * as THREE from 'three';

function GlitchyShape() {
  const mainShapeRef = useRef<THREE.Group>(null);
  const fragmentsRef = useRef<THREE.Group>(null);
  const lightRef = useRef<THREE.PointLight>(null);

  useFrame((state, delta) => {
    const { clock } = state;
    const elapsedTime = clock.getElapsedTime();

    if (!mainShapeRef.current || !fragmentsRef.current || !lightRef.current) return;

    // --- The Core of the New, Controlled Glitch Effect ---
    // We create a rhythmic cycle for the glitch event (e.g., every 4 seconds).
    const glitchCycle = (elapsedTime % 4) / 4; // Normalized value from 0 to 1 over 4 seconds
    // We use Math.pow to create a very sharp, intense peak for the glitch, making it feel like a pulse.
    const glitchIntensity = Math.pow(Math.sin(glitchCycle * Math.PI), 15);

    // 1. Apply effects to the stable main shape
    // It always has a slow, constant rotation.
    mainShapeRef.current.rotation.x += delta * 0.05;
    mainShapeRef.current.rotation.y += delta * 0.08;
    // Add a very subtle positional shake during the glitch pulse.
    mainShapeRef.current.position.x = (Math.random() - 0.5) * glitchIntensity * 0.1;

    // 2. Apply intense effects to the unstable fragments
    if (glitchIntensity > 0.1) {
      fragmentsRef.current.visible = true;
      // Fragments scale up and down erratically during the pulse.
      fragmentsRef.current.scale.setScalar(1 + glitchIntensity * 0.3);
      // Fragments rotate wildly.
      fragmentsRef.current.rotation.y += delta * glitchIntensity * 5 * (Math.random() - 0.5);
      fragmentsRef.current.rotation.x += delta * glitchIntensity * 5 * (Math.random() - 0.5);
    } else {
      // Fragments are hidden when the glitch is not active.
      fragmentsRef.current.visible = false;
    }

    // 3. Control the light
    // A slower, more atmospheric flicker.
    lightRef.current.intensity = 4 + Math.sin(elapsedTime * 2.5) * 2;
    // The light slowly orbits, casting dynamic highlights.
    lightRef.current.position.x = Math.sin(elapsedTime * 0.3) * 2;
    lightRef.current.position.z = Math.cos(elapsedTime * 0.3) * 2;
  });

  return (
    <>
      <pointLight ref={lightRef} color="#00F5D4" intensity={4} distance={10} />
      
      {/* The "Stable" Core */}
      <group ref={mainShapeRef}>
        <Edges scale={1.5}>
          <meshBasicMaterial color="#888888" transparent opacity={0.3} depthTest={false} />
        </Edges>
      </group>
      
      {/* The "Unstable" Fragments that appear during the glitch */}
      <group ref={fragmentsRef}>
        <Edges scale={1.55} rotation={[0.5, 0.5, 0]}>
            <meshBasicMaterial color="#00F5D4" transparent opacity={0.4} depthTest={false} />
        </Edges>
         <Edges scale={1.6} rotation={[-0.5, -0.5, 0]}>
            <meshBasicMaterial color="#EAEAEA" transparent opacity={0.25} depthTest={false} />
        </Edges>
      </group>
    </>
  );
}

export function GlitchingIcosahedron() {
  return (
    <div className="absolute inset-0 -z-10 opacity-30 md:opacity-20">
      <Canvas camera={{ position: [0, 0, 5], fov: 75 }}>
        <GlitchyShape />
      </Canvas>
    </div>
  );
}

--- END OF FILE: src/components/core/GlitchingIcosahedron.tsx ---


--- FILE: src/components/core/GlobeCanvas.tsx ---
// src/components/core/GlobeCanvas.tsx
"use client";

import { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';

// --- UPGRADE: A more visually appealing loading component that matches the site's aesthetic ---
const GlobeLoadingState = () => (
  <div className="w-full h-full flex flex-col items-center justify-center text-secondary gap-4">
    <div className="relative flex items-center justify-center w-8 h-8">
      <div className="absolute w-full h-full bg-accent/50 rounded-full animate-ping opacity-75"></div>
      <div className="relative w-3 h-3 bg-accent rounded-full"></div>
    </div>
    <p className="tracking-widest text-sm uppercase">Initializing Hologram</p>
  </div>
);

// The dynamic import is now encapsulated within this component
const DynamicHologramGlobe = dynamic(
  () => import('@/components/core/HologramGlobe').then(mod => mod.HologramGlobe),
  { 
    ssr: false,
    loading: () => <GlobeLoadingState />
  }
);

interface GlobeCanvasProps {
  sectionRef: React.RefObject<HTMLElement | null>;
}

export function GlobeCanvas({ sectionRef }: GlobeCanvasProps) {
  const [isMounted, setIsMounted] = useState(false);

  // This effect runs only once on the client, after the initial render.
  useEffect(() => {
    setIsMounted(true);
  }, []);

  // --- THE DEFINITIVE FIX ---
  // We render the stable placeholder on the server and during initial hydration.
  // Only after the component has certifiably mounted on the client do we switch
  // to rendering the dynamic, client-side-only component.
  // This completely resolves the race condition.
  if (!isMounted) {
    return <GlobeLoadingState />;
  }

  return <DynamicHologramGlobe sectionRef={sectionRef} />;
}

--- END OF FILE: src/components/core/GlobeCanvas.tsx ---


--- FILE: src/components/core/GridBackground.tsx ---
"use client";

import { useEffect, useRef } from "react";

export function GridBackground() {
  const backgroundRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handler = (e: PointerEvent) => {
      if (backgroundRef.current) {
        const { clientX, clientY } = e;
        backgroundRef.current.style.setProperty("--x", `${clientX}px`);
        backgroundRef.current.style.setProperty("--y", `${clientY}px`);
      }
    };

    window.addEventListener("pointermove", handler);

    return () => window.removeEventListener("pointermove", handler);
  }, []);

  return (
    <div
      ref={backgroundRef}
      className="fixed inset-0 -z-10 h-screen w-screen"
      style={
        {
          "--x": "50vw",
          "--y": "50vh",
          "--size": "100px", // Size of the grid cells
          "--color": "rgba(136, 136, 136, 0.1)", // Color of the grid lines (secondary color with low opacity)
          background: `
           radial-gradient(circle at var(--x) var(--y), rgba(0, 245, 212, 0.1), transparent 15%),
  linear-gradient(to right, var(--color) 1px, transparent 1px),
  linear-gradient(to bottom, var(--color) 1px, transparent 1px)
`,
          backgroundSize: `
            100% 100%,
            var(--size) var(--size),
            var(--size) var(--size)
          `,
        } as React.CSSProperties
      }
    />
  );
}

--- END OF FILE: src/components/core/GridBackground.tsx ---


--- FILE: src/components/core/Header.tsx ---
// src/components/core/Header.tsx
"use client";

import React, { useState, useEffect, useRef } from 'react';
import gsap from 'gsap';
import { useTheme } from '@/contexts/ThemeContext';

// --- Configuration ---
const ZAIN_TIMEZONE = 'Asia/Karachi';
const SECTIONS = [
  { id: 'hero', name: 'Introduction' },
  { id: 'about', name: 'About' },
  { id: 'education', name: 'Academics' },
  { id: 'projects', name: 'Work' },
  { id: 'testimonials', name: 'Reviews' },
  { id: 'packages', name: 'Packages' },
  { id: 'contact', name: 'Contact' },
];

const formatTime = (date: Date) => date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

const Header = () => {
  const headerRef = useRef<HTMLDivElement>(null);
  const [userTime, setUserTime] = useState('--:--');
  const [zainTime, setZainTime] = useState('--:--');
  const [activeSection, setActiveSection] = useState('Introduction');
  const { theme } = useTheme();

  // --- Logic migrated from the old HUD component ---
  useEffect(() => {
    const updateTimes = () => {
      const now = new Date();
      setUserTime(formatTime(now));
      const zainDate = new Date(now.toLocaleString('en-US', { timeZone: ZAIN_TIMEZONE }));
      setZainTime(formatTime(zainDate));
    };
    updateTimes();
    const intervalId = setInterval(updateTimes, 1000 * 30);
    return () => clearInterval(intervalId);
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      let currentSection = SECTIONS[0].name;
      for (let i = SECTIONS.length - 1; i >= 0; i--) {
        const sectionEl = document.getElementById(SECTIONS[i].id);
        if (sectionEl && sectionEl.getBoundingClientRect().top < window.innerHeight / 2) {
          currentSection = SECTIONS[i].name;
          break;
        }
      }
      setActiveSection(currentSection);
    };
    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll();
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  useEffect(() => {
    const ctx = gsap.context(() => {
      gsap.fromTo(headerRef.current, 
        { y: '-100%' }, 
        { y: '0%', duration: 1.2, ease: 'power3.out', delay: 1.8 }
      );
    }, headerRef);
    return () => ctx.revert();
  }, []);

  const openCommandPalette = () => {
    // Programmatically dispatch a Ctrl+K or Cmd+K event to open the palette
    document.dispatchEvent(new KeyboardEvent('keydown', {
        key: 'k',
        ctrlKey: true,
        metaKey: true, // for macOS
        bubbles: true,
    }));
  };

  return (
    <header 
      ref={headerRef}
      className="hidden md:flex fixed top-0 left-0 w-full h-20 px-6 z-40 bg-background/50 backdrop-blur-lg border-b border-secondary/10"
    >
      <div className="flex items-center justify-between w-full">
        {/* --- Left Side: Brand Identity --- */}
        <div className="flex items-center gap-4">
          <a href="#hero" className="font-black text-xl tracking-wider text-primary" data-cursor-hover>ZK</a>
          <div className="w-px h-6 bg-secondary/20" />
          <div className="flex items-center gap-2">
            <div className="relative flex items-center justify-center w-3 h-3" aria-label="Online Status">
              <span className="absolute w-full h-full bg-accent rounded-full animate-ping opacity-75"></span>
              <span className="relative w-1.5 h-1.5 bg-accent rounded-full"></span>
            </div>
            <p className="text-sm text-secondary tracking-widest">AVAILABLE / LAHORE, PK</p>
          </div>
        </div>

        {/* --- Center: Contextual HUD Info --- */}
        <div className="flex items-center gap-6 text-sm">
          <div className="text-center">
            <p className="text-xs text-secondary tracking-widest">TIME (CLIENT / ZAIN)</p>
            <p className="font-mono font-medium">{userTime} / {zainTime}</p>
          </div>
          <div className="w-px h-6 bg-secondary/20" />
          <div className="text-center">
            <p className="text-xs text-secondary tracking-widest">CURRENT SECTION</p>
            <p className="font-medium tracking-wider">{activeSection}</p>
          </div>
          <div className="w-px h-6 bg-secondary/20" />
          <div className="text-center">
            <p className="text-xs text-secondary tracking-widest">ACTIVE THEME</p>
            <p className="font-medium tracking-wider capitalize">{theme}</p>
          </div>
        </div>

        {/* --- Right Side: Command Palette Trigger --- */}
        <button 
          onClick={openCommandPalette}
          className="group flex items-center gap-3 px-4 py-2 bg-surface/50 rounded-md border border-secondary/20 transition-all duration-300 hover:border-accent/80 hover:shadow-[0_0_15px_-5px_theme(colors.accent/50)]"
          data-cursor-hover
        >
          <span className="text-sm text-secondary group-hover:text-primary transition-colors">COMMANDS</span>
          <kbd className="font-sans text-xs bg-secondary/20 text-secondary px-1.5 py-0.5 rounded">Ctrl+K</kbd>
        </button>
      </div>
    </header>
  );
};

export default Header;

--- END OF FILE: src/components/core/Header.tsx ---


--- FILE: src/components/core/HeroBackground.tsx ---
// src/components/core/HeroBackground.tsx
"use client";

import { useEffect, useRef } from "react";
import gsap from 'gsap';

export function HeroBackground() {
  const backgroundRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handler = (e: PointerEvent) => {
      if (backgroundRef.current) {
        const { clientX, clientY } = e;
        backgroundRef.current.style.setProperty("--x", `${clientX}px`);
        backgroundRef.current.style.setProperty("--y", `${clientY}px`);
      }
    };
    window.addEventListener("pointermove", handler);

    gsap.fromTo(backgroundRef.current, { opacity: 0 }, { opacity: 1, duration: 2, delay: 0.2, ease: 'power3.out' });

    return () => window.removeEventListener("pointermove", handler);
  }, []);

  return (
    <div
      ref={backgroundRef}
      // --- FIX: Pushed to the very back of the stack ---
      className="fixed inset-0 -z-30 h-screen w-screen opacity-0"
      style={
        {
          "--x": "50vw",
          "--y": "50vh",
          "--size": "100px",
          "--grid-color": "rgba(136, 136, 136, 0.1)",
          "--spotlight-color": "rgba(0, 245, 212, 0.12)",
          background: `
            radial-gradient(circle at var(--x) var(--y), var(--spotlight-color), transparent 25%),
            linear-gradient(to right, var(--grid-color) 1px, transparent 1px),
            linear-gradient(to bottom, var(--grid-color) 1px, transparent 1px),
            conic-gradient(from 45deg, transparent 0deg 90deg, rgba(136, 136, 136, 0.05) 90deg 180deg, transparent 180deg 360deg)
          `,
          backgroundSize: `
            100% 100%,
            var(--size) var(--size),
            var(--size) var(--size),
            calc(var(--size) * 4) calc(var(--size) * 4)
          `,
          animation: "rotate-schematic 60s linear infinite",
        } as React.CSSProperties
      }
    />
  );
}

--- END OF FILE: src/components/core/HeroBackground.tsx ---


--- FILE: src/components/core/HologramGlobe.tsx ---
// src/components/core/HologramGlobe.tsx -- FINAL PRODUCTION VERSION (Corrected)
"use client";

import React, { useRef, useEffect } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { HologramGlobeModel } from './HologramGlobeModel';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import * as THREE from 'three';

gsap.registerPlugin(ScrollTrigger);

// --- FIX: The prop type is now correctly defined to accept a potentially null ref. ---
type SceneProps = {
  sectionRef: React.RefObject<HTMLElement | null>;
};

function Scene({ sectionRef }: SceneProps) {
  const globeRef = useRef<THREE.Group>(null!);

  useFrame((state, delta) => {
    if (globeRef.current) {
      globeRef.current.rotation.y += delta * 0.4;
    }
  });

  useEffect(() => {
    // The null-check for `sectionRef.current` is now essential and correct.
    if (globeRef.current && sectionRef.current) {
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: sectionRef.current,
          start: 'top bottom',
          end: 'bottom top',
          scrub: 1,
        },
      });
      tl.to(globeRef.current.rotation, {
        y: `+=${Math.PI * 8}`,
        ease: 'none',
      });
    }
  }, [sectionRef]);

  return <HologramGlobeModel ref={globeRef} />;
}


// --- FIX: The prop type for the main component is also corrected. ---
type HologramGlobeProps = {
  sectionRef: React.RefObject<HTMLElement | null>;
};

export function HologramGlobe({ sectionRef }: HologramGlobeProps) {
  return (
    <Canvas camera={{ position: [0, 0, 8], fov: 45 }} gl={{ alpha: true }}>
      <ambientLight intensity={0.5} />
      <directionalLight position={[5, 5, 5]} intensity={1.5} color="#00F5D4" />
      <pointLight position={[-5, -5, 5]} intensity={1.5} color="#FFFFFF" />
      
      <Scene sectionRef={sectionRef} />
    </Canvas>
  );
}

--- END OF FILE: src/components/core/HologramGlobe.tsx ---


--- FILE: src/components/core/HologramGlobeModel.tsx ---
// src/components/core/HologramGlobeModel.tsx -- MODIFIED

"use client";

import React, { useEffect } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { ThreeElements } from '@react-three/fiber';
import * as THREE from 'three';

export const HologramGlobeModel = React.forwardRef<THREE.Group, ThreeElements['group']>((props, ref) => {
  // UPDATED: The path now points to the new, compressed model.
  const { scene, animations } = useGLTF('/hologram_globe_compressed.glb');
  const { actions } = useAnimations(animations, ref as React.RefObject<THREE.Group>);

  useEffect(() => {
    Object.values(actions).forEach((action) => {
      if (action) action.play();
    });
    return () => {
      Object.values(actions).forEach((action) => {
        if (action) action.stop();
      });
    };
  }, [actions]);
  
  return (
    <group ref={ref} {...props} dispose={null}>
      <primitive object={scene} scale={2.4} position={[0, 1.3, 0]} />
    </group>
  );
});

// UPDATED: Preload the compressed model.
useGLTF.preload('/hologram_globe_compressed.glb');
HologramGlobeModel.displayName = 'HologramGlobeModel';

--- END OF FILE: src/components/core/HologramGlobeModel.tsx ---


--- FILE: src/components/core/IcosahedronScene.tsx ---
"use client";

import { Canvas, useFrame } from "@react-three/fiber";
import { useRef, useMemo } from "react";
import { Icosahedron, Edges } from "@react-three/drei";
import { Vector3, Color } from "three";
import * as THREE from 'three';

function Shape() {
  const meshRef = useRef<THREE.Mesh>(null);
  const lightRef = useRef<THREE.PointLight>(null);
  const mousePosition = useRef({ x: 0, y: 0 });

  // Track mouse position
  useMemo(() => {
    const handleMouseMove = (event: MouseEvent) => {
      mousePosition.current = {
        x: (event.clientX / window.innerWidth) * 2 - 1,
        y: -(event.clientY / window.innerHeight) * 2 + 1,
      };
    };
    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);
  
  const accentColor = useMemo(() => new Color("#00F5D4"), []);

  useFrame((state, delta) => {
    // Constant rotation
    if (meshRef.current) {
      meshRef.current.rotation.x += delta * 0.1;
      meshRef.current.rotation.y += delta * 0.15;
    }

    // Mouse follow (lerp for smoothness)
    const targetPosition = new Vector3(mousePosition.current.x * 2, mousePosition.current.y * 2, 2);
    if (lightRef.current) {
      lightRef.current.position.lerp(targetPosition, 0.05);
    }
  });

  return (
    <>
      <ambientLight intensity={0.2} />
      <pointLight ref={lightRef} position={[0, 0, 2]} color={accentColor} intensity={5} distance={10} />
      <Icosahedron args={[1.5, 0]} ref={meshRef}>
        <meshStandardMaterial wireframe color={accentColor} emissive={accentColor} emissiveIntensity={0.2} />
        <Edges scale={1.001}>
          <meshBasicMaterial color="#888888" depthTest={false} transparent />
        </Edges>
      </Icosahedron>
    </>
  );
}

export function IcosahedronScene() {
  return (
    <div className="absolute inset-0 -z-10">
      <Canvas camera={{ position: [0, 0, 5] }}>
        <Shape />
      </Canvas>
    </div>
  );
}

--- END OF FILE: src/components/core/IcosahedronScene.tsx ---


--- FILE: src/components/core/Navbar.tsx ---
// src/components/core/Navbar.tsx -- REVERTED TO CLEAN & CORRECT STATE

"use client";

import { useState, useEffect, useRef } from 'react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin';
import { Home, Layers3, GraduationCap, LayoutGrid, MessageSquareQuote, ClipboardCheck, ArrowUpRight, ChevronDown, X } from 'lucide-react';

// GSAP plugins are registered in SmoothScroller now, but it's safe to keep them here.
gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

const navItems = [
  { id: 'hero', label: 'Home', icon: <Home size={22} /> },
  { id: 'about', label: 'About & Skills', icon: <Layers3 size={22} /> },
  { id: 'education', label: 'Academic Journey', icon: <GraduationCap size={22} /> },
  { id: 'projects', label: 'Curated Work', icon: <LayoutGrid size={22} /> },
  { id: 'testimonials', label: 'Client Reviews', icon: <MessageSquareQuote size={22} /> },
  { id: 'packages', label: 'My Packages', icon: <ClipboardCheck size={22} /> },
  { id: 'contact', label: 'Contact', icon: <ArrowUpRight size={22} /> },
];

const Navbar = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isHidden, setIsHidden] = useState(false);
  const lastScrollY = useRef(0);
  
  const [activeSection, setActiveSection] = useState('hero');
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  
  const desktopNavRef = useRef<HTMLElement>(null);
  const mobileNavRef = useRef<HTMLElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const menuTimeline = useRef<gsap.core.Timeline | null>(null);

  useEffect(() => {
    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      setIsScrolled(currentScrollY > 50);
      setIsHidden(currentScrollY > 100 && currentScrollY > lastScrollY.current);
      lastScrollY.current = currentScrollY;
    };
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  useEffect(() => {
    gsap.to(mobileNavRef.current, { y: isHidden ? '-100%' : '0%', duration: 0.4, ease: 'power3.inOut' });
  }, [isHidden]);

  useEffect(() => {
    const ctx = gsap.context(() => {
      gsap.fromTo(desktopNavRef.current, { x: '-100%' }, { x: '0%', duration: 1, ease: 'power3.out', delay: 1.5 });

      // After a short delay for lazy-loaded components to mount...
      const setupTriggersTimeout = setTimeout(() => {
        const triggers = navItems.map(item =>
          ScrollTrigger.create({
            trigger: `#${item.id}`,
            start: 'top center',
            end: 'bottom center',
            onToggle: self => {
              if (self.isActive) {
                setActiveSection(item.id);
              }
            },
          })
        );
        
        // Refresh is still a good practice after dynamic content loads.
        ScrollTrigger.refresh();

        // Cleanup function for when the component unmounts
        return () => {
          triggers.forEach(trigger => trigger.kill());
        };
      }, 500);

      // Main cleanup for the timeout
      return () => clearTimeout(setupTriggersTimeout);
    });

    return () => ctx.revert();
  }, []);

  // Mobile menu logic remains unchanged
  useEffect(() => {
    const menuItems = gsap.utils.toArray('.mobile-nav-item');
    menuTimeline.current = gsap.timeline({ paused: true })
      .to(dropdownRef.current, { clipPath: 'inset(0% 0% 0% 0%)', duration: 0.5, ease: 'power3.inOut' })
      .fromTo(menuItems, { opacity: 0, y: 15 }, { opacity: 1, y: 0, stagger: 0.05, duration: 0.4, ease: 'power2.out' }, "-=0.3");
  }, []);

  useEffect(() => {
    if (isMenuOpen) menuTimeline.current?.play();
    else menuTimeline.current?.reverse();
  }, [isMenuOpen]);

  useEffect(() => {
    const handleOutsideClick = (event: MouseEvent) => {
      if (isMenuOpen && dropdownRef.current && !dropdownRef.current.contains(event.target as Node) && mobileNavRef.current && !mobileNavRef.current.contains(event.target as Node)) setIsMenuOpen(false);
    };
    document.addEventListener('mousedown', handleOutsideClick);
    return () => document.removeEventListener('mousedown', handleOutsideClick);
  }, [isMenuOpen]);

  const handleNavClick = (sectionId: string) => {
    setIsMenuOpen(false);
    // Lenis handles the smooth scroll, so we just tell it where to go.
    gsap.to(window, { duration: 1.8, scrollTo: { y: `#${sectionId}`, offsetY: 0 }, ease: 'power3.inOut' });
  };

  return (
    <>
      <nav ref={desktopNavRef} className="hidden md:flex fixed top-0 left-0 h-screen w-20 items-center justify-center z-50">
          <div className="relative flex items-center justify-center h-auto py-6 backdrop-blur-md rounded-full"><ul className="flex flex-col items-center justify-center gap-6">{navItems.map(item => (<li key={item.id}><button onClick={() => handleNavClick(item.id)} className="group relative flex items-center justify-center h-12 w-12" aria-label={`Go to ${item.label} section`} data-cursor-hover><span className={`absolute inset-0 rounded-full border border-accent transition-all duration-300 ease-in-out ${activeSection === item.id ? 'opacity-100 scale-100 shadow-[0_0_15px_-3px_theme(colors.accent)]' : 'opacity-0 scale-125'}`} /><div className={`transition-colors duration-300 ${activeSection === item.id ? 'text-accent' : 'text-secondary group-hover:text-primary'}`}>{item.icon}</div><div className="absolute left-full ml-4 pointer-events-none"><span className="opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap bg-surface px-3 py-1.5 text-primary rounded-md shadow-lg text-sm tracking-wider -translate-x-4 group-hover:translate-x-0">{item.label}</span></div></button></li>))}</ul></div>
      </nav>
      <div className="md:hidden fixed top-0 left-0 w-full z-50">
        <nav ref={mobileNavRef} className={`relative z-10 h-20 px-6 flex items-center justify-between transition-colors duration-300 ${isScrolled ? 'bg-background/50 backdrop-blur-lg border-b border-secondary/10' : 'bg-transparent border-b border-transparent'}`}>
          <button onClick={() => handleNavClick('hero')} data-cursor-hover className="font-black text-xl tracking-wider text-primary">ZK</button>
          <button onClick={() => setIsMenuOpen(!isMenuOpen)} data-cursor-hover aria-label="Toggle menu">
            {isMenuOpen ? <X size={28} className="text-primary" /> : <ChevronDown size={28} className={`text-primary transition-transform duration-300 ${isMenuOpen ? 'rotate-180' : ''}`} />}
          </button>
        </nav>
        <div ref={dropdownRef} className="absolute top-full left-0 w-full bg-background/60 backdrop-blur-xl border-b border-secondary/10 overflow-hidden" style={{ clipPath: 'inset(0% 0% 100% 0%)' }}>
          <ul className="flex flex-col items-center gap-2 py-6">{navItems.filter(item => item.id !== 'hero').map(item => (<li key={item.id} className="mobile-nav-item w-full"><button onClick={() => handleNavClick(item.id)} className="w-full text-center py-4 text-secondary hover:text-primary text-xl font-light tracking-widest transition-colors duration-300">{item.label}</button></li>))}</ul>
        </div>
      </div>
    </>
  );
};

export default Navbar;

--- END OF FILE: src/components/core/Navbar.tsx ---


--- FILE: src/components/core/PageContent.tsx ---
// src/components/core/PageContent.tsx -- MODIFIED FOR SEMANTICS

"use client";

import dynamic from 'next/dynamic';

const SectionPlaceholder = () => <section className="min-h-screen w-full" aria-hidden="true" />;

const Hero = dynamic(() => import('@/components/sections/Hero'));
const About = dynamic(() => import('@/components/sections/About'), { ssr: false, loading: () => <SectionPlaceholder /> });
const Education = dynamic(() => import('@/components/sections/Education'), { ssr: false, loading: () => <SectionPlaceholder /> });
const Projects = dynamic(() => import('@/components/sections/Projects'), { ssr: false, loading: () => <SectionPlaceholder /> });
const Testimonials = dynamic(() => import('@/components/sections/Testimonials'), { ssr: false, loading: () => <SectionPlaceholder /> });
const Packages = dynamic(() => import('@/components/sections/Packages'), { ssr: false, loading: () => <SectionPlaceholder /> });
const Contact = dynamic(() => import('@/components/sections/Contact'), { ssr: false, loading: () => <SectionPlaceholder /> });

export default function PageContent() {
  // Use a React Fragment as the <main> tag is now in page.tsx
  return (
    <>
      <Hero />
      <About />
      <Education />
      <Projects />
      <Testimonials />
      <Packages />
      <Contact />
    </>
  );
}

--- END OF FILE: src/components/core/PageContent.tsx ---


--- FILE: src/components/core/PremiumImageDisplay.tsx ---
// src/components/core/PremiumImageDisplay.tsx
"client";

import React, { useEffect, useRef } from 'react';
import Image from 'next/image';
import gsap from 'gsap';
import { ArrowUpRight } from 'lucide-react';

interface PremiumImageDisplayProps {
  imageUrl: string;
  liveSiteUrl?: string; // The URL is now optional
}

const PremiumImageDisplay: React.FC<PremiumImageDisplayProps> = ({ imageUrl, liveSiteUrl }) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const imageContainerRef = useRef<HTMLDivElement>(null);
  const overlayRef = useRef<HTMLDivElement>(null);
  const ctaRefs = {
    corners: useRef<(HTMLDivElement | null)[]>([]),
    text: useRef<HTMLSpanElement>(null)
  };

  useEffect(() => {
    const container = containerRef.current;
    if (!container) return;

    // --- The Immersive Parallax Effect (runs for all projects) ---
    const imageXTo = gsap.quickTo(imageContainerRef.current, "x", { duration: 0.8, ease: "power3.out" });
    const imageYTo = gsap.quickTo(imageContainerRef.current, "y", { duration: 0.8, ease: "power3.out" });

    const handleMouseMove = (e: MouseEvent) => {
      const { left, top, width, height } = container.getBoundingClientRect();
      const x = e.clientX - left;
      const y = e.clientY - top;
      const xPercent = (x / width - 0.5) * 2;
      const yPercent = (y / height - 0.5) * 2;
      
      imageXTo(xPercent * 20);
      imageYTo(yPercent * 15);
    };

    container.addEventListener('mousemove', handleMouseMove);

    // --- The Conditional Hover Animation (only runs if there's a link) ---
    if (liveSiteUrl) {
      const [topLeft, topRight, bottomLeft, bottomRight] = ctaRefs.corners.current;
      const hoverTimeline = gsap.timeline({ paused: true })
        .to(overlayRef.current, { opacity: 1, duration: 0.4, ease: 'power2.inOut' })
        .fromTo([topLeft, bottomRight], { '--scale-x': 0, '--scale-y': 0 }, { '--scale-x': 1, '--scale-y': 1, duration: 0.5, ease: 'power3.out' }, 0.1)
        .fromTo([topRight, bottomLeft], { '--scale-x': 0, '--scale-y': 0 }, { '--scale-x': 1, '--scale-y': 1, duration: 0.5, ease: 'power3.out' }, 0.2)
        .fromTo(ctaRefs.text.current, { opacity: 0, y: 10 }, { opacity: 1, y: 0, duration: 0.4, ease: 'power2.out' }, 0.3);

      const handleMouseEnter = () => hoverTimeline.play();
      const handleMouseLeave = () => hoverTimeline.reverse();
    
      container.addEventListener('mouseenter', handleMouseEnter);
      container.addEventListener('mouseleave', handleMouseLeave);
      
      return () => {
        container.removeEventListener('mousemove', handleMouseMove);
        container.removeEventListener('mouseenter', handleMouseEnter);
        container.removeEventListener('mouseleave', handleMouseLeave);
      };
    }
    
    // Cleanup for non-linked projects
    return () => container.removeEventListener('mousemove', handleMouseMove);
  }, [liveSiteUrl]);

  const displayContent = (
    <div
      ref={imageContainerRef}
      className="absolute inset-[-5%] w-[110%] h-[110%]"
    >
      <Image
        src={imageUrl}
        alt="Project Screenshot"
        fill
        sizes="(max-width: 768px) 100vw, 50vw"
        priority
        className="object-cover transition-filter duration-500 ease-out group-hover:brightness-50"
      />
    </div>
  );

  return (
    <div
      ref={containerRef}
      className="group relative block w-full h-full rounded-lg overflow-hidden shadow-2xl shadow-black/60 will-change-transform"
    >
      {displayContent}
      
      {/* --- CONDITIONAL RENDERING BLOCK --- */}
      {/* The entire interactive overlay is only rendered if a liveSiteUrl exists. */}
      {liveSiteUrl && (
        <a
          href={liveSiteUrl}
          target="_blank"
          rel="noopener noreferrer"
          className="absolute inset-0 z-10"
          data-cursor-hover
          aria-label="View live site"
        >
          <div
            ref={overlayRef}
            className="absolute inset-0 flex items-center justify-center opacity-0 bg-black/30 backdrop-blur-sm"
          >
            <div className="relative w-[90%] h-[90%] flex items-center justify-center">
              {['top-left', 'top-right', 'bottom-left', 'bottom-right'].map(pos => (
                <div
                  key={pos}
                  ref={el => {ctaRefs.corners.current.push(el)}}
                  className={`absolute w-12 h-12 before:absolute before:bg-accent after:absolute after:bg-accent 
                    ${pos === 'top-left' ? 'top-0 left-0 before:w-full before:h-px after:w-px after:h-full' : ''}
                    ${pos === 'top-right' ? 'top-0 right-0 before:w-full before:h-px after:w-px after:h-full before:origin-right after:origin-top' : ''}
                    ${pos === 'bottom-left' ? 'bottom-0 left-0 before:w-full before:h-px after:w-px after:h-full before:origin-left after:origin-bottom' : ''}
                    ${pos === 'bottom-right' ? 'bottom-0 right-0 before:w-full before:h-px after:w-px after:h-full before:origin-right after:origin-bottom' : ''}
                  `}
                  style={{ transform: 'scaleX(var(--scale-x, 0)) scaleY(var(--scale-y, 0))', transition: 'transform 0.5s cubic-bezier(0.25, 1, 0.5, 1)' }}
                />
              ))}
              <span ref={ctaRefs.text} className="flex items-center gap-3 text-primary text-lg font-semibold tracking-wider opacity-0">
                View Project
                <ArrowUpRight />
              </span>
            </div>
          </div>
        </a>
      )}
    </div>
  );
};

export default PremiumImageDisplay;

--- END OF FILE: src/components/core/PremiumImageDisplay.tsx ---


--- FILE: src/components/core/PremiumScrollIndicator.tsx ---
"use client";

import React, { useEffect, useRef, useState } from 'react';
import gsap from 'gsap';

const PremiumScrollIndicator = () => {
  const indicatorRef = useRef<HTMLDivElement>(null);
  const lineRef = useRef<SVGRectElement>(null);
  const [isVisible, setIsVisible] = useState(false);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    // GSAP animation for the inner line
    gsap.to(lineRef.current, {
      y: 20,
      duration: 1.5,
      ease: 'power1.inOut',
      repeat: -1,
      yoyo: true,
    });

    // --- Intelligent Presence Logic ---
    const resetTimer = () => {
      if (timerRef.current) clearTimeout(timerRef.current);
      timerRef.current = setTimeout(() => {
        // Only show if user is at the top of the page
        if (window.scrollY < 10) {
          setIsVisible(true);
        }
      }, 5000); // 5-second inactivity timer
    };

    const handleActivity = () => {
      setIsVisible(false);
      resetTimer();
    };

    // Initial timer start
    resetTimer();

    window.addEventListener('scroll', handleActivity);
    window.addEventListener('mousemove', handleActivity);
    window.addEventListener('touchstart', handleActivity);

    return () => {
      if (timerRef.current) clearTimeout(timerRef.current);
      window.removeEventListener('scroll', handleActivity);
      window.removeEventListener('mousemove', handleActivity);
      window.removeEventListener('touchstart', handleActivity);
    };
  }, []);

  useEffect(() => {
    // Handle fade in/out animation
    gsap.to(indicatorRef.current, {
      autoAlpha: isVisible ? 1 : 0,
      duration: 0.5,
      ease: 'power3.out',
    });
  }, [isVisible]);

  return (
    // The component is always in the DOM, but visibility is controlled by GSAP
    <div ref={indicatorRef} className="opacity-0 invisible" data-cursor-hover>
      <svg
        width="28"
        height="48"
        viewBox="0 0 28 48"
        fill="none"
        xmlns="http://www.w.org/2000/svg"
        className="stroke-secondary hover:stroke-primary transition-colors duration-300"
      >
        {/* The sleek, techy outline */}
        <rect x="1" y="1" width="26" height="46" rx="13" strokeWidth="1.5" />
        {/* The kinetic, animated inner line */}
        <rect ref={lineRef} x="12.5" y="10" width="3" height="8" rx="1.5" fill="currentColor" className="stroke-none text-secondary group-hover:text-primary transition-colors duration-300" />
      </svg>
    </div>
  );
};

export default PremiumScrollIndicator;

--- END OF FILE: src/components/core/PremiumScrollIndicator.tsx ---


--- FILE: src/components/core/ProjectNavigation.tsx ---
"use client";

import { MoveLeft, MoveRight } from 'lucide-react';

interface ProjectNavigationProps {
  onPrev: () => void;
  onNext: () => void;
  currentIndex: number;
  totalCount: number;
}

const ProjectNavigation: React.FC<ProjectNavigationProps> = ({ onPrev, onNext, currentIndex, totalCount }) => {
  const formattedCurrent = String(currentIndex + 1).padStart(2, '0');
  const formattedTotal = String(totalCount).padStart(2, '0');

  return (
    <div className="flex items-center justify-between w-full max-w-sm" data-cursor-text>
      {/* --- REFINEMENT: Removed hover text for a cleaner, icon-only interaction --- */}
      <button onClick={onPrev} className="group p-3 text-secondary hover:text-primary transition-colors duration-300" data-cursor-hover>
        <MoveLeft size={24} className="transition-transform duration-300 group-hover:-translate-x-1" />
      </button>

      <div className="font-mono text-lg tracking-widest text-secondary">
        {formattedCurrent} / <span className="text-primary">{formattedTotal}</span>
      </div>

      <button onClick={onNext} className="group p-3 text-secondary hover:text-primary transition-colors duration-300" data-cursor-hover>
        <MoveRight size={24} className="transition-transform duration-300 group-hover:translate-x-1" />
      </button>
    </div>
  );
};

export default ProjectNavigation;

--- END OF FILE: src/components/core/ProjectNavigation.tsx ---


--- FILE: src/components/core/ResumeViewer.tsx ---
// src/components/core/ResumeViewer.tsx
"use client";

import React, { useEffect, useRef, useState, MouseEvent, WheelEvent } from 'react';
import gsap from 'gsap';
import { X, Download, ZoomIn, ZoomOut, RefreshCw } from 'lucide-react';
import { stopLenis, startLenis } from './SmoothScroller';

interface ResumeViewerProps {
  isOpen: boolean;
  onClose: () => void;
}

// --- UPGRADE: The definitive aspect ratio of your résumé for perfect framing ---
const RESUME_ASPECT_RATIO = 210 / 297; // A4 paper standard

const ResumeViewer: React.FC<ResumeViewerProps> = ({ isOpen, onClose }) => {
  const overlayRef = useRef<HTMLDivElement>(null);
  const cardRef = useRef<HTMLDivElement>(null);
  const imageContainerRef = useRef<HTMLDivElement>(null);
  const uiElementsRef = useRef<(HTMLDivElement | null)[]>([]);
  const timeline = useRef<gsap.core.Timeline>(null);

  const transform = useRef({ x: 0, y: 0, scale: 1 });
  const [isPanning, setIsPanning] = useState(false);
  const startPos = useRef({ x: 0, y: 0 });

  const handleDownload = (e: React.MouseEvent) => {
    e.stopPropagation();
    const link = document.createElement('a');
    link.href = '/zain-khalid-resume.pdf';
    link.setAttribute('download', 'Zain-Khalid-Resume.pdf');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // --- REFINED INTERACTIVITY LOGIC FOR PERFECT ASPECT RATIO ---

  const handleWheel = (e: WheelEvent<HTMLDivElement>) => {
    e.preventDefault();
    if (!imageContainerRef.current) return;

    const { clientX, clientY, deltaY } = e;
    
    // --- SIMPLIFIED & CORRECTED LOGIC ---
    // Since the container now perfectly matches the image ratio, the letterbox calculation is no longer needed.
    const rect = e.currentTarget.getBoundingClientRect();
    const mouseX = (clientX - rect.left) / transform.current.scale;
    const mouseY = (clientY - rect.top) / transform.current.scale;

    const scaleAmount = -deltaY * 0.001;
    const newScale = gsap.utils.clamp(0.5, 4, transform.current.scale + scaleAmount);

    // Apply the zoom-to-point formula
    const newX = mouseX - (mouseX - transform.current.x) * (newScale / transform.current.scale);
    const newY = mouseY - (mouseY - transform.current.y) * (newScale / transform.current.scale);
    
    transform.current = { scale: newScale, x: newX, y: newY };

    gsap.to(imageContainerRef.current, {
      ...transform.current,
      duration: 0.2,
      ease: 'power2.out'
    });
  };

  const handleMouseDown = (e: MouseEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsPanning(true);
    startPos.current = { 
      x: e.clientX - transform.current.x, 
      y: e.clientY - transform.current.y 
    };
  };

  const handleMouseMove = (e: MouseEvent<HTMLDivElement>) => {
    if (!isPanning || !imageContainerRef.current) return;
    e.preventDefault();
    transform.current.x = e.clientX - startPos.current.x;
    transform.current.y = e.clientY - startPos.current.y;
    gsap.set(imageContainerRef.current, { x: transform.current.x, y: transform.current.y });
  };

  const handleMouseUpOrLeave = () => setIsPanning(false);

  const zoom = (direction: 'in' | 'out') => {
    const newScale = gsap.utils.clamp(0.5, 4, transform.current.scale + (direction === 'in' ? 0.3 : -0.3));
    gsap.to(imageContainerRef.current, { scale: newScale, duration: 0.3, ease: 'power3.out' });
    transform.current.scale = newScale;
  };
  
  const resetTransform = () => {
    transform.current = { x: 0, y: 0, scale: 1 };
    gsap.to(imageContainerRef.current, { x: 0, y: 0, scale: 1, duration: 0.4, ease: 'power3.inOut' });
  };


  // --- ANIMATION & LIFECYCLE LOGIC ---

  useEffect(() => {
    timeline.current = gsap.timeline({ paused: true })
      .to(overlayRef.current, { autoAlpha: 1, duration: 0.4, ease: 'power2.inOut' })
      .fromTo(cardRef.current, { y: '5vh', scale: 0.95, autoAlpha: 0 }, { y: '0vh', scale: 1, autoAlpha: 1, duration: 0.5, ease: 'power3.out' }, "-=0.2")
      .fromTo(uiElementsRef.current, { y: 20, autoAlpha: 0 }, { y: 0, autoAlpha: 1, stagger: 0.1, duration: 0.4, ease: 'power2.out' }, "-=0.3");
  }, []);

  useEffect(() => {
    if (isOpen) {
      stopLenis();
      document.body.style.overflow = 'hidden';
      timeline.current?.play();
    } else {
      resetTransform();
      timeline.current?.reverse().eventCallback("onReverseComplete", () => {
        startLenis();
        document.body.style.overflow = '';
      });
    }
  }, [isOpen]);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => { if (isOpen && event.key === 'Escape') onClose(); };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isOpen, onClose]);

  return (
    <div
      ref={overlayRef}
      className="fixed inset-0 z-[9999] bg-background/60 backdrop-blur-md flex items-center justify-center p-4 sm:p-6"
      style={{ visibility: 'hidden' }}
      onClick={onClose}
      data-force-hide-cursor
    >
      {/* --- UPGRADE: The card now uses CSS aspect-ratio for a perfect, responsive fit --- */}
      <div
        ref={cardRef}
        className="relative w-full max-w-[calc(90vh*var(--resume-aspect-ratio))] max-h-[90vh] bg-surface/80 backdrop-blur-xl border border-secondary/10 rounded-xl shadow-2xl shadow-black/50 flex flex-col overflow-hidden"
        style={{ 
          visibility: 'hidden',
          '--resume-aspect-ratio': RESUME_ASPECT_RATIO,
          aspectRatio: 'var(--resume-aspect-ratio)'
        } as React.CSSProperties}
        onClick={(e) => e.stopPropagation()}
      >
        <div
          ref={el => {uiElementsRef.current[0] = el}}
          className="flex-shrink-0 flex justify-between items-center px-6 py-4 border-b border-secondary/10"
        >
          <h3 className="text-lg font-semibold text-primary tracking-wider">Zain Khalid - Résumé</h3>
          <div className="flex items-center gap-2">
            <button onClick={handleDownload} className="group flex items-center gap-2 px-3 py-2 text-sm text-secondary hover:text-primary bg-surface/50 rounded-md border border-secondary/20 transition-colors duration-300" data-cursor-hover>
              <Download size={16} /> <span>Download PDF</span>
            </button>
            <button onClick={onClose} className="p-2 text-secondary hover:text-primary transition-colors duration-300 rounded-full" data-cursor-hover aria-label="Close">
              <X size={20} />
            </button>
          </div>
        </div>
        
        <div
          className="flex-grow bg-black/20 relative overflow-hidden"
          onWheel={handleWheel}
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUpOrLeave}
          onMouseLeave={handleMouseUpOrLeave}
          ref={el => {uiElementsRef.current[1] = el}}
        >
          <div
            ref={imageContainerRef}
            className={`w-full h-full ${isPanning ? 'cursor-grabbing' : 'cursor-grab'}`}
            style={{
              backgroundImage: `url('/zain-khalid-resume.png')`,
              backgroundSize: 'contain',
              backgroundRepeat: 'no-repeat',
              backgroundPosition: 'center',
              transformOrigin: '0 0', // Critical for correct GSAP transforms
              willChange: 'transform'
            }}
          />
          <div className="absolute bottom-4 right-4 flex items-center gap-1 bg-surface/50 backdrop-blur-sm p-1.5 rounded-lg border border-secondary/10">
              <button onClick={() => zoom('out')} data-cursor-hover className="p-2 text-secondary hover:text-primary rounded-md transition-colors"><ZoomOut size={20}/></button>
              <button onClick={() => zoom('in')} data-cursor-hover className="p-2 text-secondary hover:text-primary rounded-md transition-colors"><ZoomIn size={20}/></button>
              <button onClick={resetTransform} data-cursor-hover className="p-2 text-secondary hover:text-primary rounded-md transition-colors"><RefreshCw size={20}/></button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResumeViewer;

--- END OF FILE: src/components/core/ResumeViewer.tsx ---


--- FILE: src/components/core/SkillOrb.tsx ---
"use client";

import { useState, useEffect, useRef, useMemo } from 'react';
import Image from 'next/image';
import gsap from 'gsap';

// --- DATA (Ensure your icons exist in /public/icons/) ---
const skillsData = [
  {
    title: "Core Stack",
    skills: [
      { name: "Next.js", iconPath: "/icons/nextjs.png" },
      { name: "React.js", iconPath: "/icons/react.png" },
      { name: "TypeScript", iconPath: "/icons/typescript.png" },
      { name: "Three.js", iconPath: "/icons/threejs.png" },
      { name: "PostgreSQL", iconPath: "/icons/postgresql.png" },
    ],
  },
  {
    title: "Composable Services",
    skills: [
      { name: "Supabase", iconPath: "/icons/supabase.png" },
      { name: "Clerk (Auth)", iconPath: "/icons/clerk.png" },
      { name: "Prisma ORM", iconPath: "/icons/prisma.png" },
      { name: "Cloudinary", iconPath: "/icons/cloudinary.png" },
      { name: "Neon (Postgres)", iconPath: "/icons/neon.png" },
    ],
  },
  {
    title: "Styling & Animation",
    skills: [
      { name: "Tailwind CSS", iconPath: "/icons/tailwind.png" },
      { name: "AntD / MUI", iconPath: "/icons/antdesign.png" },
      { name: "SCSS", iconPath: "/icons/sass.png" },
      { name: "Framer Motion", iconPath: "/icons/framer.png" },
      { name: "GSAP", iconPath: "/icons/gsap.png" },
    ],
  },
  {
    title: "Other Expertise",
    skills: [
      { name: "C++", iconPath: "/icons/cpp.png" },
      { name: "Python", iconPath: "/icons/python.png" },
      { name: "Performance & SEO", iconPath: "/icons/seo.png" },
      { name: "Vercel & CI/CD", iconPath: "/icons/vercel.png" },
      { name: "Digital Marketing", iconPath: "/icons/marketing.png" },
    ],
  },
];

const ORBIT_RADIUS = 140;
const ICON_CONTAINER_SIZE = 72;
const ICON_IMAGE_SIZE = 42;
const CYCLE_INTERVAL = 5000;

const SkillOrb = () => {
  const [currentSetIndex, setCurrentSetIndex] = useState(0);
  const orbRef = useRef<HTMLDivElement>(null);
  const titleRef = useRef<HTMLDivElement>(null);

  const currentSkillSet = skillsData[currentSetIndex];

  const iconPositions = useMemo(() => {
    const positions = [];
    const numIcons = currentSkillSet.skills.length;
    const angleStep = (2 * Math.PI) / numIcons;
    for (let i = 0; i < numIcons; i++) {
      positions.push({ rotation: (i * angleStep * 180) / Math.PI });
    }
    return positions;
  }, [currentSkillSet]);

  useEffect(() => {
    gsap.fromTo(".center-icon-container", { scale: 0, opacity: 0 }, { scale: 1, opacity: 1, duration: 1, ease: 'back.out(1.7)', delay: 1.5 });
  }, []);

  useEffect(() => {
    const ctx = gsap.context(() => {
      const tl = gsap.timeline();
      
      // THE FIX for Title Flash: GSAP now fully controls the text content during the animation.
      tl.to(titleRef.current, { opacity: 0, y: -15, duration: 0.3, ease: 'power2.in' })
       .set(titleRef.current, { innerText: currentSkillSet.title })
       .to(titleRef.current, { opacity: 1, y: 0, duration: 0.4, ease: 'power2.out' });
      
      tl.fromTo(".spoke", { scale: 0, opacity: 0 }, { scale: 1, opacity: 1, duration: 0.8, ease: 'elastic.out(1, 0.75)', stagger: 0.1 }, 0.2);
    }, orbRef);
    return () => ctx.revert();
  }, [currentSetIndex]);

  useEffect(() => {
    const interval = setInterval(() => {
      gsap.to(".spoke", {
        scale: 0, opacity: 0, duration: 0.5, ease: 'back.in(1.7)', stagger: 0.05,
        onComplete: () => setCurrentSetIndex(prev => (prev + 1) % skillsData.length)
      });
    }, CYCLE_INTERVAL);
    return () => clearInterval(interval);
  }, []);

  return (
    <div ref={orbRef} className="flex flex-col items-center justify-center">
      <div className="relative" style={{ width: ORBIT_RADIUS * 2 + ICON_CONTAINER_SIZE, height: ORBIT_RADIUS * 2 + ICON_CONTAINER_SIZE }}>
        
        {/* --- Center Icon with WIDER, SOFTER Multi-Layer Bloom --- */}
        <div className="center-icon-container absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-10">
          <div className="relative flex items-center justify-center group">
            <div className="absolute -inset-6 bg-accent/10 rounded-full blur-3xl group-hover:blur-4xl transition-all duration-500 ease-in-out" />
            <div className="absolute -inset-2 bg-accent/20 rounded-full blur-2xl group-hover:blur-3xl transition-all duration-500 ease-in-out" />
            <div 
              className="relative bg-background/60 backdrop-blur-md rounded-full flex items-center justify-center border border-secondary/20"
              style={{ width: ICON_CONTAINER_SIZE, height: ICON_CONTAINER_SIZE }}
            >
              <Image src="/icons/logo.png" alt="Zain Khalid Logo" width={ICON_IMAGE_SIZE} height={ICON_IMAGE_SIZE} className="opacity-90" />
            </div>
          </div>
        </div>

        {/* --- Re-architected Spokes (Perfectly Layered & Aligned) --- */}
        {iconPositions.map((pos, index) => (
          <div
            key={`spoke-${currentSkillSet.title}-${index}`}
            className="spoke absolute top-1/2 left-1/2 origin-left z-0" // THE FIX: z-0 ensures lines are behind the z-10 center icon
            style={{ transform: `rotate(${pos.rotation}deg)` }}
          >
            <div className="relative flex items-center" style={{ width: ORBIT_RADIUS }}>
              <div className="w-full h-px bg-gradient-to-r from-secondary/50 to-transparent" />
              <div
                className="absolute right-0 bg-background/60 backdrop-blur-md rounded-full flex items-center justify-center border border-secondary/10"
                style={{
                  width: ICON_CONTAINER_SIZE, height: ICON_CONTAINER_SIZE,
                  transform: `translateX(50%) rotate(-${pos.rotation}deg)`,
                }}
              >
                <Image src={currentSkillSet.skills[index].iconPath} alt={currentSkillSet.skills[index].name} width={ICON_IMAGE_SIZE} height={ICON_IMAGE_SIZE} className="opacity-90" />
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <div className="mt-10 text-secondary font-medium tracking-widest uppercase text-sm h-6 flex items-center justify-center">
        {/* THE FIX: Render an empty span. GSAP is now the ONLY source of truth for the title's content. */}
        <span ref={titleRef}></span>
      </div>
    </div>
  );
};

export default SkillOrb;

--- END OF FILE: src/components/core/SkillOrb.tsx ---


--- FILE: src/components/core/SmoothScroller.tsx ---
// src/components/core/SmoothScroller.tsx -- FINAL, CONDITIONALLY-ACTIVATED VERSION

"use client";

import { useEffect } from 'react';
import Lenis from '@studio-freight/lenis';
import { usePathname } from 'next/navigation';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { useMediaQuery } from '@/hooks/useMediaQuery'; // Import our conditional hook

let lenis: Lenis | null = null;

// --- MODIFICATION: Make the control functions null-safe ---
// If Lenis isn't initialized (i.e., on mobile), these functions will now do nothing instead of causing an error.
export const stopLenis = () => lenis?.stop();
export const startLenis = () => lenis?.start();

const SmoothScroller = () => {
  const pathname = usePathname();
  // We'll define "desktop" as screens wider than 1024px.
  const isDesktop = useMediaQuery('(min-width: 1024px)');

  useEffect(() => {
    // --- CORE LOGIC: Only run Lenis setup on desktop devices ---
    if (isDesktop) {
      gsap.registerPlugin(ScrollTrigger);

      if (lenis) {
        lenis.destroy();
      }

      lenis = new Lenis({
        duration: 2.0,
        lerp: 0.06,
        wheelMultiplier: 1.1,
        syncTouch: true,
      });
      
      // The critical GSAP synchronization logic
      lenis.on('scroll', ScrollTrigger.update);
      
      gsap.ticker.add((time) => {
        lenis?.raf(time * 1000);
      });
      
      gsap.ticker.lagSmoothing(0);

      // Return a cleanup function to destroy Lenis and the GSAP ticker when the component unmounts
      return () => {
        if (lenis) {
          gsap.ticker.remove(lenis.raf);
          lenis.destroy();
          lenis = null;
        }
      };
    } else {
      // On mobile, ensure any lingering instance is destroyed.
      if (lenis) {
        lenis.destroy();
        lenis = null;
      }
    }
  }, [isDesktop]); // This effect re-runs if the user resizes their browser across the 1024px breakpoint

  useEffect(() => {
    // This effect should run on all devices to ensure scrolling to top on navigation
    window.scrollTo(0, 0);
  }, [pathname]);

  return null;
};

export default SmoothScroller;

--- END OF FILE: src/components/core/SmoothScroller.tsx ---


--- FILE: src/components/sections/About.tsx ---
"use client";

import { useEffect, useRef, useState } from 'react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import SkillOrb from '@/components/core/SkillOrb';
import { CheckCircle, Code, Database, Layers, Cloud, FileText } from 'lucide-react';
// --- Step 1: Import the custom hook ---
import { useResumeViewer } from '@/contexts/ResumeViewerContext';

gsap.registerPlugin(ScrollTrigger);

// ... (vercelStackData and promises arrays remain unchanged) ...
const vercelStackData = [
  { id: 'frontend', name: 'Frontend', icon: <Layers size={22} />, technologies: ['Next.js', 'React', 'TypeScript', 'Tailwind CSS'], description: 'Crafting responsive, high-performance user interfaces with a focus on exceptional UX. Utilizing the power of React server components for speed and SEO.' },
  { id: 'backend', name: 'Backend & Data', icon: <Database size={22} />, technologies: ['Node.js', 'PostgreSQL', 'Prisma', 'Serverless Functions'], description: 'Building robust, scalable server-side logic and database schemas. Leveraging serverless functions for efficiency and infinite scalability.' },
  { id: 'deployment', name: 'Deployment', icon: <Cloud size={22} />, technologies: ['Vercel', 'CI/CD', 'GitHub Actions', 'Edge Network'], description: 'Ensuring seamless, continuous integration and deployment on Vercel’s global edge network for unparalleled speed and reliability.' },
];

const promises = [
  { title: "Pixel-Perfect Precision", description: "Every detail crafted to perfection, ensuring a flawless visual experience.", icon: <CheckCircle className="text-accent flex-shrink-0 mt-1" size={24} /> },
  { title: "Elite Performance", description: "Blazing-fast load times and smooth interactions are not optional; they are standard.", icon: <CheckCircle className="text-accent flex-shrink-0 mt-1" size={24} /> },
  { title: "Seamless Communication", description: "A transparent and collaborative process, keeping you aligned every step of the way.", icon: <CheckCircle className="text-accent flex-shrink-0 mt-1" size={24} /> },
];

const STACK_BUTTON_HEIGHT = 64;
const STACK_BUTTON_GAP = 8;
const TOTAL_ITEM_HEIGHT = STACK_BUTTON_HEIGHT + STACK_BUTTON_GAP;


const About = () => {
  const sectionRef = useRef<HTMLElement>(null);
  const leftColRef = useRef<HTMLDivElement>(null);
  const rightColRef = useRef<HTMLDivElement>(null);
  const [selectedStackId, setSelectedStackId] = useState(vercelStackData[0].id);
  const stackIndicatorRef = useRef<HTMLDivElement>(null);
  // --- Step 2: Initialize the hook ---
  const { openResume } = useResumeViewer();

  const selectedStack = vercelStackData.find(s => s.id === selectedStackId) || vercelStackData[0];
  
  // ... (all useEffect hooks remain unchanged) ...
  useEffect(() => {
    const selectedIndex = vercelStackData.findIndex(s => s.id === selectedStackId);
    if (stackIndicatorRef.current) {
        gsap.to(stackIndicatorRef.current, { y: selectedIndex * TOTAL_ITEM_HEIGHT, duration: 0.5, ease: 'power3.inOut' });
    }
    const detailsCtx = gsap.context(() => {
        gsap.fromTo('.stack-details-content > *', { opacity: 0, y: 15 }, { opacity: 1, y: 0, duration: 0.4, ease: 'power3.out', stagger: 0.08 });
    });
    return () => detailsCtx.revert();
  }, [selectedStackId]);
  useEffect(() => {
    const ctx = gsap.context(() => {
      const narrativeBlocks = gsap.utils.toArray<HTMLElement>('.narrative-block');
      const animateNarrativeBlocks = () => {
        narrativeBlocks.forEach(block => {
          const line = block.querySelector('.narrative-line');
          const heading = block.querySelector('h3');
          const paragraph = block.querySelector('p');
          const tl = gsap.timeline({ scrollTrigger: { trigger: block, start: 'top 85%' } });
          tl.fromTo(line, { scaleY: 0 }, { scaleY: 1, duration: 0.8, ease: 'power3.out' })
            .fromTo(heading, { autoAlpha: 0, y: 30 }, { autoAlpha: 1, y: 0, duration: 0.6, ease: 'power3.out' }, '-=0.6')
            .fromTo(paragraph, { autoAlpha: 0, y: 20 }, { autoAlpha: 1, y: 0, duration: 0.6, ease: 'power2.out' }, '-=0.4');
        });
      };
      ScrollTrigger.matchMedia({
        "(min-width: 768px)": function() {
          ScrollTrigger.create({ trigger: leftColRef.current, start: 'top top', end: 'bottom bottom', pin: rightColRef.current, pinSpacing: true });
          gsap.fromTo(rightColRef.current, { autoAlpha: 0 }, { autoAlpha: 1, duration: 0.8, ease: 'power3.out', scrollTrigger: { trigger: rightColRef.current, start: 'top 80%' } });
          animateNarrativeBlocks();
        },
        "(max-width: 767px)": function() {
          gsap.fromTo('.skill-orb-container', { autoAlpha: 0, y: 50 }, { autoAlpha: 1, y: 0, duration: 0.6, ease: 'power3.out', scrollTrigger: { trigger: '.skill-orb-container', start: 'top 90%' } });
          animateNarrativeBlocks();
        }
      });
      gsap.fromTo('.bottom-content', { autoAlpha: 0, y: 50 }, { autoAlpha: 1, y: 0, duration: 0.8, ease: 'power3.out', scrollTrigger: { trigger: '.bottom-content', start: 'top 85%' }});
    }, sectionRef);
    return () => ctx.revert();
  }, []);

  return (
    <section id="about" ref={sectionRef} className="relative py-32 px-4 sm:px-6 lg:px-8 overflow-hidden">
      <div className="max-w-7xl mx-auto w-full">
        {/* ... (first grid with narrative/skill orb remains unchanged) ... */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-16 md:gap-24">
          <div ref={leftColRef} className="relative">
            <div className="space-y-24">
              <div className="narrative-block relative pl-10">
                <div className="narrative-line absolute top-0 left-0 w-1 h-full bg-gradient-to-b from-accent/50 to-transparent origin-top" />
                <h3 className="text-3xl font-bold tracking-tighter mb-6" data-cursor-text>My Expertise</h3>
                <p className="text-secondary text-lg" data-cursor-text>Specializing in the Vercel ecosystem, I build high-performance web applications, transforming complex problems into elegant, efficient, and interactive digital experiences.</p>
              </div>
              <div className="narrative-block relative pl-10">
                <div className="narrative-line absolute top-0 left-0 w-1 h-full bg-gradient-to-b from-accent/50 to-transparent origin-top" />
                <h3 className="text-3xl font-bold tracking-tighter mb-6" data-cursor-text>About Me</h3>
                <p className="text-secondary text-lg" data-cursor-text>Beyond the code, I am a creative problem-solver driven by a passion for architectural design and digital craftsmanship, aiming to build lasting, intuitive platforms that empower users.</p>
              </div>
              <div className="narrative-block relative pl-10">
                <div className="narrative-line absolute top-0 left-0 w-1 h-full bg-gradient-to-b from-accent/50 to-transparent origin-top" />
                <h3 className="text-3xl font-bold tracking-tighter mb-6" data-cursor-text>My Philosophy</h3>
                <p className="text-secondary text-lg" data-cursor-text>I believe in minimalism and purpose. Every line of code, every animation, and every pixel is placed with intent, contributing to a seamless and memorable user journey without unnecessary complexity.</p>
              </div>
            </div>
          </div>
          <div ref={rightColRef}><div className="skill-orb-container flex items-start justify-center min-h-[450px] md:min-h-0"><SkillOrb /></div></div>
        </div>
        
        <div className="bottom-content mt-32">
          {/* ... (second grid with stack explorer remains unchanged) ... */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-16 md:gap-24">
            <div className="stack-explorer-container">
              <h3 className="text-3xl font-bold tracking-tighter mb-10" data-cursor-text>The Tech Stack</h3>
              <div className="flex gap-6">
                <div className="relative"><div ref={stackIndicatorRef} className={`absolute left-0 w-1 bg-accent rounded-full shadow-[0_0_10px_theme(colors.accent)]`} style={{ height: `${STACK_BUTTON_HEIGHT}px` }} /><div className="flex flex-col gap-2">{vercelStackData.map((stack) => (<button key={stack.id} onClick={() => setSelectedStackId(stack.id)} className="group relative flex items-center text-left pl-8 pr-4" style={{ height: `${STACK_BUTTON_HEIGHT}px` }} data-cursor-hover><div className={`flex items-center gap-4 transition-colors duration-300 ${selectedStackId === stack.id ? 'text-primary' : 'text-secondary group-hover:text-primary'}`}>{stack.icon}<span className="font-semibold text-lg">{stack.name}</span></div></button>))}</div></div>
                <div className="flex-1 pt-1 pr-4 min-h-[220px]"><div className="stack-details-content"><h4 className="font-semibold text-primary text-lg mb-4" data-cursor-text>{selectedStack.name} Technologies</h4><div className="flex flex-wrap gap-2 mb-6">{selectedStack.technologies.map(tech => (<span key={tech} className="bg-surface/80 border border-secondary/10 text-secondary/90 text-sm px-3 py-1 rounded-full">{tech}</span>))}</div><p className="text-secondary text-base leading-relaxed" data-cursor-text>{selectedStack.description}</p></div></div>
              </div>
            </div>
            <div className="promises-container">
              <h3 className="text-3xl font-bold tracking-tighter mb-10" data-cursor-text>What I Deliver</h3>
              <ul className="space-y-8">{promises.map((promise) => (<li key={promise.title} className="flex items-start gap-4" data-cursor-text>{promise.icon}<div><h4 className="font-semibold text-primary text-lg">{promise.title}</h4><p className="text-secondary text-base">{promise.description}</p></div></li>))}</ul>
            </div>
          </div>
          
          {/* --- Step 3: Convert the <a> tag to a <button> and add the onClick handler --- */}
          <div className="mt-24 flex justify-center">
            <button
              onClick={openResume}
              data-cursor-hover
              className="group relative inline-flex items-center justify-center gap-3 overflow-hidden rounded-full bg-surface/50 px-8 py-4 text-lg font-medium text-primary shadow-lg transition-all duration-300 hover:border-accent hover:shadow-[0_0_20px_theme(colors.accent)] border border-secondary/20 backdrop-blur-sm"
            >
              <FileText className="transition-transform duration-300 group-hover:-translate-y-1" />
              <span>View My Résumé</span>
            </button>
          </div>
        </div>
      </div>
    </section>
  );
};

export default About;

--- END OF FILE: src/components/sections/About.tsx ---


--- FILE: src/components/sections/Contact.tsx ---
// src/components/sections/Contact.tsx
"use client";

import React, { useState, useEffect, useRef, FormEvent } from 'react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import toast from 'react-hot-toast';
import { Mail, Phone, Loader, Check, AlertTriangle, User, AtSign, MessageSquare, Send } from 'lucide-react';
// --- Step 1: Import the new, robust wrapper component ---
import { GlobeCanvas } from '@/components/core/GlobeCanvas';

gsap.registerPlugin(ScrollTrigger);
type FormStatus = 'idle' | 'sending' | 'success' | 'error';

const formatTime = (date: Date) => {
  return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });
};

export default function Contact() {
  const sectionRef = useRef<HTMLElement>(null);
  const [formData, setFormData] = useState({ name: '', email: '', message: '' });
  const [status, setStatus] = useState<FormStatus>('idle');
  const [myTime, setMyTime] = useState('');
  const [userTime, setUserTime] = useState('');

  // No changes to any of the form logic or time logic
  useEffect(() => {
    const updateTimes = () => {
      const now = new Date();
      setUserTime(formatTime(now));
      const myDate = new Date(now.toLocaleString('en-US', { timeZone: 'Asia/Karachi' }));
      setMyTime(formatTime(myDate));
    };
    updateTimes();
    const intervalId = setInterval(updateTimes, 1000);
    return () => clearInterval(intervalId);
  }, []);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (status === 'sending') return;
    setStatus('sending');
    const toastId = toast.loading('Sending message...');
    try {
      const response = await fetch('/api/send', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(formData), });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ error: 'Server responded with an unexpected error' }));
        throw new Error(errorData.error || 'Server responded with an error');
      }
      setStatus('success');
      toast.success('Message sent successfully!', { id: toastId });
      setFormData({ name: '', email: '', message: '' });
      setTimeout(() => setStatus('idle'), 4000);
    } catch (error: any) {
      setStatus('error');
      toast.error(error.message || 'Failed to send. Please try again.', { id: toastId });
      setTimeout(() => setStatus('idle'), 4000);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  // No changes to the GSAP animation logic
  useEffect(() => {
    const ctx = gsap.context(() => {
      const tl = gsap.timeline({ scrollTrigger: { trigger: sectionRef.current, start: 'top 70%' } });
      tl.fromTo('.contact-header-reveal', { y: 50, autoAlpha: 0 }, { y: 0, autoAlpha: 1, stagger: 0.15, duration: 1, ease: 'power3.out' })
        .fromTo('.contact-content-reveal', { y: 50, autoAlpha: 0 }, { y: 0, autoAlpha: 1, stagger: 0.1, duration: 0.8, ease: 'power3.out' }, "-=0.7");
    }, sectionRef);
    return () => ctx.revert();
  }, []);
  
  const buttonState = { idle: { text: 'Send Message', icon: <Send size={20} /> }, sending: { text: 'Sending...', icon: <Loader className="animate-spin" size={20} /> }, success: { text: 'Message Sent', icon: <Check size={20} /> }, error: { text: 'Try Again', icon: <AlertTriangle size={20} /> }, };

  return (
    <section id="contact" ref={sectionRef} className="relative min-h-screen py-32 px-4 sm:px-6 lg:px-8" data-force-hide-cursor>
      <div className="max-w-7xl mx-auto w-full">
        <div className="text-center mb-20">
          <h2 className="contact-header-reveal text-4xl md:text-5xl font-bold tracking-tighter text-primary mb-6">Let's Build What's Next</h2>
          <p className="contact-header-reveal text-lg text-secondary max-w-3xl mx-auto">Have a project in mind, a question, or just want to connect? I'm here to listen. Let's turn your vision into a tangible, high-performance digital reality.</p>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 lg:gap-24 items-start">
          <div className="lg:sticky lg:top-24 w-full h-[500px] lg:h-[calc(100vh-8rem)]">
            {/* --- Step 2: Replace the old logic with the new, stable component --- */}
            <GlobeCanvas sectionRef={sectionRef as React.RefObject<HTMLElement | null>} />
          </div>
          <div className="flex flex-col gap-12">
            <div className="contact-content-reveal">
              <h3 className="text-3xl font-bold tracking-tight text-primary mb-4">Global Sync</h3>
              <div className="p-6 bg-surface/50 backdrop-blur-lg border border-secondary/10 rounded-lg space-y-5">
                <div className="flex items-center gap-3"><div className="relative flex items-center justify-center w-4 h-4"><span className="absolute w-full h-full bg-accent rounded-full animate-ping opacity-75"></span><span className="relative w-2 h-2 bg-accent rounded-full"></span></div><p className="text-secondary">Available for Global Collaboration</p></div>
                <div className="flex justify-between items-baseline border-t border-secondary/10 pt-4"><span className="text-primary font-medium">My Local Time (PKT)</span><time className="font-mono text-lg text-accent tracking-wider">{myTime}</time></div>
                <div className="flex justify-between items-baseline border-t border-secondary/10 pt-4"><span className="text-primary font-medium">Your Local Time</span><time className="font-mono text-lg text-accent tracking-wider">{userTime}</time></div>
              </div>
            </div>
            <div className="contact-content-reveal">
              <h3 className="text-3xl font-bold tracking-tight text-primary mb-4">Contact Info</h3>
              <div className="p-6 bg-surface/50 backdrop-blur-lg border border-secondary/10 rounded-lg space-y-6">
                 <a href="mailto:zain.nextdev@gmail.com" className="group flex items-center gap-4 text-secondary hover:text-primary transition-colors duration-300" data-cursor-hover><Mail className="group-hover:text-accent transition-colors flex-shrink-0" size={24} /><span>zain.nextdev@gmail.com</span></a>
                 <a href="https://wa.me/923236748502" target="_blank" rel="noopener noreferrer" className="group flex items-center gap-4 text-secondary hover:text-primary transition-colors duration-300" data-cursor-hover><Phone className="group-hover:text-accent transition-colors flex-shrink-0" size={24} /><span>+92 323 6748502</span></a>
              </div>
            </div>
            <div className="contact-content-reveal">
              <h3 className="text-3xl font-bold tracking-tight text-primary mb-4">Direct Message</h3>
              <div className="p-6 bg-surface/50 backdrop-blur-xl border border-secondary/10 rounded-lg">
                <form onSubmit={handleSubmit} className="space-y-10">
                  <div className="relative group"><User className="absolute top-1/2 -translate-y-1/2 left-3 text-secondary peer-focus:text-accent transition-colors" size={20} /><input type="text" id="name" name="name" value={formData.name} onChange={handleInputChange} required className="peer w-full bg-transparent border-b border-secondary/20 text-primary py-3 pl-12 pr-4 text-lg outline-none transition-colors" placeholder=" " data-cursor-text /><label htmlFor="name" className="absolute left-12 -top-3.5 text-secondary text-sm transition-all peer-placeholder-shown:text-base peer-placeholder-shown:top-3 peer-focus:-top-3.5 peer-focus:text-accent peer-focus:text-sm">Full Name</label><span className="absolute bottom-0 left-0 w-full h-0.5 bg-accent scale-x-0 group-focus-within:scale-x-100 transition-transform duration-300 origin-center" /></div>
                  <div className="relative group"><AtSign className="absolute top-1/2 -translate-y-1/2 left-3 text-secondary peer-focus:text-accent transition-colors" size={20} /><input type="email" id="email" name="email" value={formData.email} onChange={handleInputChange} required className="peer w-full bg-transparent border-b border-secondary/20 text-primary py-3 pl-12 pr-4 text-lg outline-none transition-colors" placeholder=" " data-cursor-text /><label htmlFor="email" className="absolute left-12 -top-3.5 text-secondary text-sm transition-all peer-placeholder-shown:text-base peer-placeholder-shown:top-3 peer-focus:-top-3.5 peer-focus:text-accent peer-focus:text-sm">Email Address</label><span className="absolute bottom-0 left-0 w-full h-0.5 bg-accent scale-x-0 group-focus-within:scale-x-100 transition-transform duration-300 origin-center" /></div>
                  <div className="relative group"><MessageSquare className="absolute top-4 left-3 text-secondary peer-focus:text-accent transition-colors" size={20} /><textarea id="message" name="message" value={formData.message} onChange={handleInputChange} required rows={4} className="peer w-full bg-transparent border-b border-secondary/20 text-primary py-3 pl-12 pr-4 text-lg outline-none resize-none transition-colors" placeholder=" " data-cursor-text /><label htmlFor="message" className="absolute left-12 -top-3.5 text-secondary text-sm transition-all peer-placeholder-shown:text-base peer-placeholder-shown:top-3 peer-focus:-top-3.5 peer-focus:text-accent peer-focus:text-sm">Your Message</label><span className="absolute bottom-0 left-0 w-full h-0.5 bg-accent scale-x-0 group-focus-within:scale-x-100 transition-transform duration-300 origin-center" /></div>
                  <button type="submit" disabled={status === 'sending'} data-cursor-hover className={`w-full group relative flex items-center justify-center gap-3 p-4 text-lg font-semibold rounded-lg overflow-hidden transition-all duration-300 ${status === 'sending' ? 'bg-secondary/20 cursor-wait' : 'bg-accent text-background hover:shadow-[0_0_20px_-5px_theme(colors.accent)]'} ${status === 'success' ? '!bg-green-500/80 text-white' : ''} ${status === 'error' ? '!bg-red-500/80 text-white' : ''}`}><span className={`transition-transform duration-300 ${status === 'idle' ? 'group-hover:-translate-x-1' : ''}`}>{buttonState[status].icon}</span><span className={`transition-transform duration-300 ${status === 'idle' ? 'group-hover:translate-x-1' : ''}`}>{buttonState[status].text}</span></button>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

--- END OF FILE: src/components/sections/Contact.tsx ---


--- FILE: src/components/sections/Education.tsx ---
"use client";

import { useEffect, useRef } from 'react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { BookOpen, Award, School } from 'lucide-react';

gsap.registerPlugin(ScrollTrigger);

const educationData = [
  {
    id: 1,
    degree: 'Bachelor of Science in Computer Science',
    institution: 'University of Engineering & Technology, Lahore',
    duration: '2024 - 2028',
    description: 'Currently enrolled in one of the country\'s most prestigious universities, developing advanced skills in computer science, programming, algorithms, and system design.',
    icon: <Award size={28} />,
  },
  {
    id: 2,
    degree: 'Intermediate in Computer Science',
    institution: 'Punjab Group of Colleges, Lahore',
    duration: '2022 - 2024',
    description: 'Graduated with an A+ Grade, establishing a formidable foundation in computer science principles, programming fundamentals, and advanced mathematics.',
    icon: <School size={28} />,
  },
  {
    id: 3,
    degree: 'Matriculation (Science)',
    institution: 'Dar e Arqam High School',
    duration: '2020 - 2022',
    description: 'Completed secondary education with an A+ Grade, cultivating a disciplined approach to scientific study and analytical problem-solving.',
    icon: <BookOpen size={28} />,
  },
];

const Education = () => {
  const sectionRef = useRef<HTMLElement>(null);
  const timelineContainerRef = useRef<HTMLUListElement>(null);
  const progressIndicatorRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const ctx = gsap.context(() => {
      // --- Initial Section Reveal ---
      const initialTl = gsap.timeline({
        scrollTrigger: { trigger: sectionRef.current, start: 'top 70%', toggleActions: 'play none none reverse' },
      });
      initialTl.fromTo('.education-title', { autoAlpha: 0, y: 50 }, { autoAlpha: 1, y: 0, duration: 0.8, ease: 'power3.out' });
      initialTl.fromTo('.timeline-line', { scaleY: 0 }, { scaleY: 1, duration: 1, ease: 'power3.inOut' }, "-=0.5");

      // --- Main scroll-driven progress indicator ---
      gsap.to(progressIndicatorRef.current, {
        height: '100%',
        ease: 'none',
        scrollTrigger: {
          trigger: sectionRef.current,
          start: 'top top',
          end: 'bottom bottom',
          scrub: true,
        },
      });

      // --- Individual item reveal animations ---
      const items = gsap.utils.toArray<HTMLElement>('.timeline-item');
      items.forEach((item) => {
        const card = item.querySelector('.timeline-card');
        const node = item.querySelector('.timeline-node');
        
        const tl = gsap.timeline({
          scrollTrigger: { trigger: item, start: 'top 80%', toggleActions: 'play none none reverse' }
        });

        tl.fromTo(card, { autoAlpha: 0, y: 50, scale: 0.95 }, { autoAlpha: 1, y: 0, scale: 1, duration: 0.8, ease: 'power3.out' })
          .fromTo(card!.querySelectorAll('.card-content'), { autoAlpha: 0, y: 10 }, { autoAlpha: 1, y: 0, stagger: 0.1, duration: 0.5, ease: 'power2.out' }, '-=0.5')
          .fromTo(node, { scale: 0 }, { scale: 1, duration: 0.6, ease: 'elastic.out(1, 0.75)' }, 0)
          .to(node, { scale: 1.2, boxShadow: '0 0 25px 5px theme(colors.accent)', repeat: 1, yoyo: true, duration: 0.4 }, '-=0.4');
      });
    }, sectionRef);
    return () => ctx.revert();
  }, []);

  return (
    <section id="education" ref={sectionRef} className="relative min-h-screen py-32 px-4 sm:px-6 lg:px-8 overflow-hidden">
      <div className="max-w-5xl mx-auto" style={{ perspective: '1200px' }}>
        <h2 className="education-title text-4xl md:text-5xl font-bold tracking-tighter text-center mb-24 invisible" data-cursor-text>
          Academic Journey
        </h2>
        <div className="relative">
          {/* Static Background Line */}
          <div className="timeline-line absolute left-4 md:left-1/2 -translate-x-1/2 top-0 w-1 h-full bg-gradient-to-b from-accent/30 to-surface origin-top" />
          {/* Animated Progress Indicator Line */}
          <div ref={progressIndicatorRef} className="absolute left-4 md:left-1/2 -translate-x-1/2 top-0 w-1 h-0 bg-accent shadow-[0_0_15px_1px_theme(colors.accent)] origin-top" />

          {/* --- REFINEMENT: Replaced negative margin with positive space for proper mobile stacking --- */}
          <ul ref={timelineContainerRef} className="space-y-8">
            {educationData.map((item, index) => (
              <li key={item.id} className="timeline-item relative pl-16 md:pl-0">
                <div className={`md:flex items-start md:gap-8 ${index % 2 !== 0 ? 'md:flex-row-reverse' : ''}`}>
                  
                  {/* Content Card */}
                  <div className="timeline-card w-full md:w-[calc(50%-1rem)] p-6 md:p-8 bg-surface/50 backdrop-blur-md border border-secondary/10 rounded-lg shadow-xl invisible">
                    <p className="card-content text-accent font-semibold tracking-wider mb-2">{item.duration}</p>
                    <h3 className="card-content text-xl sm:text-2xl font-bold text-primary mb-2">{item.degree}</h3>
                    <h4 className="card-content text-lg text-secondary mb-4">{item.institution}</h4>
                    <p className="card-content text-secondary/80 text-base sm:text-lg">{item.description}</p>
                  </div>

                  {/* Spacer for Desktop */}
                  <div className="hidden md:block w-[calc(50%-1rem)]"></div>
                </div>

                {/* Central Icon Node */}
                <div className="timeline-node absolute top-8 left-4 md:left-1/2 -translate-x-1/2 w-8 h-8 flex items-center justify-center">
                  <div className="absolute w-3 h-3 bg-accent/50 rounded-full" />
                  <div className="absolute w-8 h-8 bg-accent/10 rounded-full animate-pulse" />
                  <div className="text-primary z-10">{item.icon}</div>
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </section>
  );
};

export default Education;

--- END OF FILE: src/components/sections/Education.tsx ---


--- FILE: src/components/sections/Hero.tsx ---
// src/components/sections/Hero.tsx

"use client";

import React, { useEffect, useRef } from 'react';
import { IcosahedronScene } from '@/components/core/IcosahedronScene';
import PremiumScrollIndicator from '@/components/core/PremiumScrollIndicator';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin';
import { GridBackground } from '../core/GridBackground';
import { HeroBackground } from '../core/HeroBackground';
// --- Step 2.1: Import the new custom hook ---
import { useIsWebKit } from '@/hooks/useIsWebKit';

gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

const Hero = () => {
  const componentRef = useRef(null);
  
  // --- Refs for different rendering paths ---
  const firefoxTitleCharsRef = useRef<(HTMLSpanElement | null)[]>([]);
  const webkitTitleRef = useRef<HTMLHeadingElement>(null);

  const titleCharsRef = useRef<(HTMLSpanElement | null)[]>([]);
  const buttonRef = useRef(null);
  const scrollIndicatorRef = useRef(null);
  const icosahedronRef = useRef<HTMLDivElement>(null);
  const parallaxRef = useRef<HTMLDivElement>(null);

  // --- Step 2.2: Instantiate the hook ---
  const isWebKit = useIsWebKit();

  const nameText = "Zain Khalid";
  const titleText = "Full-Stack Developer & Designer";

  useEffect(() => {
    // This effect now depends on `isWebKit` to choose the correct animation target.
    // It will only run once on the client after the hook has determined the browser.
    const ctx = gsap.context(() => {
      const tl = gsap.timeline({ delay: 0.2 });

      tl.fromTo(icosahedronRef.current, { opacity: 0 }, { opacity: 1, duration: 1.5, ease: 'power3.out' });
      tl.fromTo(parallaxRef.current, { opacity: 0 }, { opacity: 1, duration: 1.5, ease: 'power3.out' }, "-=1.2");

      // --- Step 2.3: Conditional Animation Logic ---
      if (isWebKit) {
        // GUARANTEED WEBKIT ANIMATION: Use a clip-path reveal on the solid element.
        tl.fromTo(webkitTitleRef.current,
          { clipPath: 'inset(0 100% 0 0)' },
          { clipPath: 'inset(0 0% 0 0)', duration: 1.2, ease: 'power3.out' },
          "-=0.8"
        );
      } else {
        // ORIGINAL FIREFOX ANIMATION: Stagger the individual characters.
        tl.fromTo(firefoxTitleCharsRef.current,
          { y: 100, opacity: 0 },
          { y: 0, opacity: 1, duration: 0.8, ease: 'power3.out', stagger: 0.04 },
          "-=0.8"
        );
      }
      
      // The rest of the timeline remains the same
      tl.fromTo(titleCharsRef.current, { y: 20, opacity: 0 }, { y: 0, opacity: 1, duration: 0.6, ease: 'power3.out', stagger: 0.02 }, "-=0.6");
      tl.fromTo(buttonRef.current, { scale: 0.8, opacity: 0 }, { scale: 1, opacity: 1, duration: 0.5, ease: 'back.out(1.7)' }, "-=0.3");
      tl.fromTo(scrollIndicatorRef.current, { y: 50, opacity: 0 }, { y: 0, opacity: 1, duration: 1, ease: 'power3.out' }, "-=0.3");

      gsap.to(scrollIndicatorRef.current, {
        opacity: 0,
        scrollTrigger: { trigger: componentRef.current, start: 'top top', end: '+=150', scrub: true },
      });

    }, componentRef);
    return () => ctx.revert();
  }, [isWebKit]); // Dependency array ensures animation runs after browser detection

  const handleExploreClick = () => {
    gsap.to(window, { duration: 1.5, scrollTo: { y: "#about", offsetY: 70 }, ease: "power3.inOut" });
  };

  const titleClasses = "text-5xl md:text-7xl lg:text-8xl font-black tracking-tighter uppercase mb-4 bg-gradient-to-r from-primary via-secondary to-primary bg-clip-text text-fill-transparent bg-[length:200%_auto] animate-sheen drop-shadow-[0_0_10px_rgba(0,245,212,0.5)]";

  return (
    <section ref={componentRef} id="hero" className="relative min-h-screen flex flex-col items-center justify-center text-center px-4 overflow-hidden">
      <div ref={parallaxRef} className="pointer-events-none fixed inset-0 -z-10 opacity-0">
        <GridBackground />
      </div>
      <HeroBackground />
      <div ref={icosahedronRef} className="opacity-0"><IcosahedronScene /></div>
      
      {/* --- Step 2.4: Conditional Rendering of the Title --- */}
      {isWebKit ? (
        // RENDER PATH 1: For Chrome, Safari, Edge, etc.
        // Renders the text as a single node. The ref is attached here.
        <h1 ref={webkitTitleRef} className={titleClasses} style={{ clipPath: 'inset(0 100% 0 0)' }}>
          {nameText}
        </h1>
      ) : (
        // RENDER PATH 2: For Firefox and other browsers.
        // Renders individual spans for character animation.
        <h1 className={titleClasses}>
          {nameText.split('').map((char, index) => (
            <span key={index} ref={el => { firefoxTitleCharsRef.current[index] = el }} className="inline-block" style={{ opacity: 0, transform: "translateY(100px)" }}>
              {char === " " ? "\u00A0" : char}
            </span>
          ))}
        </h1>
      )}
      
      {/* The rest of the component remains unchanged */}
      <h2 className="text-xs sm:text-sm md:text-base lg:text-lg font-light text-secondary tracking-[0.2em] md:tracking-[0.3em] uppercase" data-cursor-text>
        {titleText.split('').map((char, index) => (
          <span key={index} ref={el => { titleCharsRef.current[index] = el }} className="inline-block" style={{ opacity: 0, transform: "translateY(20px)" }}>
            {char === " " ? "\u00A0" : char}
          </span>
        ))}
      </h2>
      
      <div ref={buttonRef} className="mt-12 opacity-0">
        <button onClick={handleExploreClick} data-cursor-hover className="relative inline-flex items-center justify-center p-0.5 overflow-hidden text-sm font-medium text-primary rounded-lg group bg-gradient-to-br from-accent to-accent-hover focus:ring-4 focus:outline-none focus:ring-cyan-800">
            <span className="relative px-8 py-3 transition-all ease-in duration-150 bg-background rounded-md group-hover:bg-opacity-0">
                EXPLORE
            </span>
        </button>
      </div>

       <div ref={scrollIndicatorRef} className="absolute bottom-10 md:bottom-28 left-1/2 -translate-x-1/2 opacity-0">
        <PremiumScrollIndicator />
      </div>
    </section>
  );
};

export default Hero;

--- END OF FILE: src/components/sections/Hero.tsx ---


--- FILE: src/components/sections/Packages.tsx ---
// src/components/sections/Packages.tsx
"use client";

import React, { useEffect, useRef, useState } from 'react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { ScrollToPlugin } from 'gsap/ScrollToPlugin'; // --- Step 1: Import ScrollToPlugin ---
import { ChevronDown, ArrowRight } from 'lucide-react';

gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

// --- Step 2: Add the new "Enterprise Architect" custom package to the data array ---
const packagesData = [
  {
    title: "The Digital Launchpad",
    tagline: "For founders needing a premium, high-speed online presence.",
    features: [
      { name: "Core Tech", value: "Next.js, TypeScript, Tailwind CSS" },
      { name: "Pages", value: "Up to 4 Core Pages (Home, About, etc.)" },
      { name: "Design", value: "Fully Responsive, Modern UI/UX" },
      { name: "Performance", value: "Guaranteed 95+ Lighthouse Score" },
      { name: "SEO", value: "On-Page SEO Foundation" },
      { name: "Contact Form", value: "Secure & Direct to Your Email" },
    ],
    timeline: "7-10 Days",
    Price: "$300 USD",
  },
  {
    title: "The Growth Accelerator",
    tagline: "For scaling businesses ready to generate leads and publish content.",
    isBestValue: true,
    features: [
      { name: "Foundation", value: "Everything in The Digital Launchpad, plus:" },
      { name: "Pages", value: "Up to 10 Pages" },
      { name: "Headless CMS", value: "Full Content Management (Sanity.io)" },
      { name: "Dynamic Content", value: "Integrated Blog or Portfolio" },
      { name: "Animations", value: "Subtle UI animations with Framer Motion" },
      { name: "Branding", value: "Professional Logo Design & Brand Kit" },
      { name: "Database", value: "Scalable PostgreSQL (Supabase/Neon)" },
    ],
    timeline: "2-3 Weeks",
    Price: "$500 USD",
  },
  {
    title: "The Enterprise Application MVP",
    tagline: "For visionaries ready to build and validate their E-commerce or SaaS idea.",
    features: [
      { name: "Foundation", value: "Everything in The Growth Accelerator, plus:" },
      { name: "Custom Backend", value: "Serverless functions for business logic" },
      { name: "Authentication", value: "Secure Sign-up, Login & Profiles" },
      { name: "Core Feature", value: "E-commerce Payments, SaaS Dashboard" },
      { name: "Data & Storage", value: "Robust Database & Cloud Media Storage" },
      { name: "Admin Dashboard", value: "Functional dashboard to manage data" },
      { name: "Support", value: "1 Month of Priority Post-Launch Support" },
    ],
    timeline: "4-6+ Weeks",
    Price: "Starting at $800+ USD",
  },
  {
    title: "Have a Unique Project in Mind?",
    tagline: "For complex, mission-critical projects requiring a unique, ground-up solution.",
    isCustom: true, // Flag for special rendering
    features: [
      { name: "Process", value: "Deep Discovery & Strategy Session" },
      { name: "Design", value: "Custom System Architecture & UI/UX Prototyping" },
      { name: "Engineering", value: "Bespoke Frontend & Backend Development" },
      { name: "Integration", value: "Third-Party API & Service Integration" },
      { name: "Infrastructure", value: "Scalable Deployment & CI/CD Planning" },
      { name: "Collaboration", value: "Dedicated Project Slack Channel & Reporting" },
    ],
    timeline: "Project-Dependent",
    Price: "Price Upon Consultation",
  },
];

const Packages = () => {
  const [activeIndex, setActiveIndex] = useState<number | null>(1);
  const sectionRef = useRef<HTMLElement>(null);
  const revealRefs = useRef<(HTMLDivElement | null)[]>([]);

  // --- Step 3: Create a GSAP-powered scroll handler ---
  const handleContactScroll = () => {
    gsap.to(window, {
      duration: 1.8,
      scrollTo: { y: '#contact', offsetY: 0 },
      ease: 'power3.inOut'
    });
  };

  // ... (GSAP and Accordion useEffects remain unchanged as they are robust) ...
  useEffect(() => {
    const ctx = gsap.context(() => {
      gsap.fromTo(sectionRef.current, { autoAlpha: 0 }, { autoAlpha: 1, duration: 1, ease: 'power3.out', scrollTrigger: { trigger: sectionRef.current, start: 'top 70%', } });
      gsap.fromTo('.stagger-reveal', { y: 50, autoAlpha: 0 }, { y: 0, autoAlpha: 1, stagger: 0.15, duration: 0.8, ease: 'power3.out', scrollTrigger: { trigger: sectionRef.current, start: 'top 60%', } });
    }, sectionRef);
    return () => ctx.revert();
  }, []);

  useEffect(() => {
    revealRefs.current.forEach((panel, index) => {
      const content = panel?.querySelector('.package-content');
      const chevron = panel?.querySelector('.chevron-icon');
      if (!content || !chevron) return;
      gsap.to(chevron, { rotate: activeIndex === index ? 180 : 0, duration: 0.5, ease: 'power3.inOut' });
      if (activeIndex === index) {
        gsap.set(content, { height: 'auto' });
        gsap.from(content, { height: 0, duration: 0.6, ease: 'power3.inOut' });
        gsap.fromTo(content.querySelectorAll('.content-stagger'), { autoAlpha: 0, y: 15 }, { autoAlpha: 1, y: 0, stagger: 0.05, duration: 0.5, ease: 'power2.out', delay: 0.2 });
      } else {
        gsap.to(content, { height: 0, duration: 0.6, ease: 'power3.inOut' });
      }
    });
  }, [activeIndex]);

  const handleToggle = (index: number) => {
    setActiveIndex(activeIndex === index ? null : index);
  };

  return (
    <section id="packages" ref={sectionRef} className="relative py-32 px-4 sm:px-6 lg:px-8">
      <div className="max-w-5xl mx-auto">
        <h2 className="stagger-reveal text-4xl md:text-5xl font-bold tracking-tighter text-center mb-10" data-cursor-text>
          My Packages
        </h2>
        <p className="stagger-reveal text-center text-secondary mb-16 max-w-3xl mx-auto bg-surface/30 backdrop-blur-sm p-4 rounded-lg border border-secondary/10">
          <strong>Note on Infrastructure:</strong> You are responsible for your own domain and any ongoing subscriptions for third-party services if used. I provide expert guidance on the setup.
        </p>

        <div className="stagger-reveal border-t border-secondary/10">
          {packagesData.map((pkg, index) => (
            <div key={index} ref={el => {revealRefs.current[index] = el}} className="package-item border-b border-secondary/10">
              <button onClick={() => handleToggle(index)} className={`w-full text-left p-6 md:p-8 flex justify-between items-center transition-colors duration-300 ${activeIndex === index ? 'bg-surface/50' : 'hover:bg-surface/30'}`} aria-expanded={activeIndex === index} data-cursor-hover>
                <div className="flex-1">
                  <div className="flex flex-col sm:flex-row sm:items-center sm:gap-4">
                    <h3 className="text-xl sm:text-2xl md:text-3xl font-bold text-primary">{pkg.title}</h3>
                    {pkg.isBestValue && <span className="text-xs font-bold tracking-widest uppercase bg-accent text-background px-3 py-1 rounded-full shadow-[0_0_15px_-2px_theme(colors.accent)] mt-2 sm:mt-0 self-start">Best Value</span>}
                  </div>
                  <p className="text-secondary mt-2">{pkg.tagline}</p>
                </div>
                <ChevronDown className={`chevron-icon flex-shrink-0 ml-4 sm:ml-6 text-secondary transition-transform duration-500 ${activeIndex === index ? 'text-accent' : ''}`} size={28} />
              </button>
              <div className="package-content h-0 overflow-hidden bg-surface/30">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8 p-6 md:p-8 border-t border-accent/20">
                  <div className="md:col-span-2">
                    <ul className="space-y-4">
                      {pkg.features.map(feature => (
                        <li key={feature.name} className="content-stagger flex flex-col md:flex-row md:items-baseline">
                          <strong className="w-full text-primary/80 font-semibold md:w-40 md:flex-shrink-0">{feature.name}:</strong>
                          <span className="text-secondary md:ml-2">{feature.value}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  <div className="flex flex-col items-start md:items-end justify-between mt-6 md:mt-0">
                    <div className="text-left md:text-right w-full">
                      <div className="content-stagger">
                        <p className="text-secondary uppercase tracking-wider text-sm">Development Time</p>
                        <p className="text-primary text-lg md:text-xl font-semibold">{pkg.timeline}</p>
                      </div>
                      <div className="content-stagger mt-6">
                        <p className="text-secondary uppercase tracking-wider text-sm">Price</p>
                        <p className={`text-2xl md:text-3xl font-bold ${pkg.isCustom ? 'text-accent' : 'text-primary'}`}>{pkg.Price}</p>
                      </div>
                    </div>
                    {/* --- Step 4: Conditionally render the custom CTA button --- */}
                    {pkg.isCustom && (
                      <div className="content-stagger mt-8 w-full">
                        <button 
                          onClick={handleContactScroll}
                          data-cursor-hover
                          className="w-full group relative flex items-center justify-center gap-3 p-4 text-lg font-semibold rounded-lg overflow-hidden transition-all duration-300 bg-accent text-background hover:shadow-[0_0_20px_-5px_theme(colors.accent)]"
                        >
                          <span>Schedule a Consultation</span>
                          <ArrowRight className="transition-transform duration-300 group-hover:translate-x-1" />
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
        <div className="stagger-reveal mt-16 text-center text-secondary bg-surface/30 backdrop-blur-sm p-6 rounded-lg border border-secondary/10">
          <h4 className="font-bold text-primary text-xl mb-2">Payment Gateway Integration</h4>
          <p>For e-commerce projects, I will integrate the best secure payment solution for your business, including Stripe, Paddle, or other global providers, based on your specific needs and location.</p>
        </div>
      </div>
    </section>
  );
};

export default Packages;

--- END OF FILE: src/components/sections/Packages.tsx ---


--- FILE: src/components/sections/Projects.tsx ---
// src/components/sections/Projects.tsx -- MODIFIED WITH will-change

"use client";

import React, { useEffect, useRef, useState } from 'react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import PremiumImageDisplay from '@/components/core/PremiumImageDisplay';
import ProjectNavigation from '@/components/core/ProjectNavigation';
import { projectsData } from '@/lib/data';

gsap.registerPlugin(ScrollTrigger);

const Projects = () => {
  const [activeIndex, setActiveIndex] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);
  const sectionRef = useRef<HTMLElement>(null);
  const imageContainerRef = useRef<HTMLDivElement>(null);
  const detailsContainerRef = useRef<HTMLDivElement>(null);

  const activeProject = projectsData[activeIndex];

  useEffect(() => {
    const ctx = gsap.context(() => {
        const tl = gsap.timeline({
            scrollTrigger: {
                trigger: sectionRef.current,
                start: 'top 60%',
                toggleActions: 'play none none reverse',
            }
        });
        tl.fromTo('.project-title-reveal', { y: 50, autoAlpha: 0 }, { y: 0, autoAlpha: 1, duration: 0.8, ease: 'power3.out' })
          .fromTo('.project-content-reveal', { y: 50, autoAlpha: 0 }, { y: 0, autoAlpha: 1, duration: 0.8, ease: 'power3.out' }, '-=0.6');
    }, sectionRef);
    return () => ctx.revert();
  }, []);
  
  useEffect(() => {
    if (!detailsContainerRef.current || !imageContainerRef.current) return;
    const textElements = gsap.utils.toArray(detailsContainerRef.current.querySelectorAll('.animate-in'));
    gsap.set(textElements, { y: 30, opacity: 0 });
    gsap.set(imageContainerRef.current, { opacity: 0, scale: 0.98 });

    const tl = gsap.timeline({ onComplete: () => setIsAnimating(false) });
    tl.to(imageContainerRef.current, { opacity: 1, scale: 1, duration: 0.6, ease: 'power3.out' })
      .to(textElements, { y: 0, opacity: 1, stagger: 0.08, duration: 0.5, ease: 'power3.out' }, "-=0.4");
  }, [activeIndex]);

  const handleNavigation = (direction: 'next' | 'prev') => {
    if (isAnimating) return;
    if (!detailsContainerRef.current || !imageContainerRef.current) return;
    setIsAnimating(true);

    const newIndex = direction === 'next'
      ? (activeIndex + 1) % projectsData.length
      : (activeIndex - 1 + projectsData.length) % projectsData.length;
      
    const textElements = gsap.utils.toArray(detailsContainerRef.current.querySelectorAll('.animate-in'));

    const tl = gsap.timeline({ onComplete: () => setActiveIndex(newIndex) });
    tl.to(textElements, { y: -30, opacity: 0, stagger: 0.05, duration: 0.4, ease: 'power2.in' })
      .to(imageContainerRef.current, { opacity: 0, scale: 0.98, duration: 0.4, ease: 'power2.in' }, "<");
  };

  return (
    <section id="projects" ref={sectionRef} className="relative min-h-screen py-32 px-4 sm:px-6 lg:px-8 flex flex-col justify-center items-center overflow-hidden">
      <div className="w-full max-w-7xl flex flex-col items-center">
        <h2 className="project-title-reveal text-4xl md:text-5xl font-bold tracking-tighter text-center mb-16 md:mb-20 invisible" data-cursor-text>
          Curated Work
        </h2>
        <div className="project-content-reveal grid grid-cols-1 md:grid-cols-2 gap-10 md:gap-20 items-center w-full invisible">
          {/* --- OPTIMIZATION APPLIED HERE --- */}
          <div ref={imageContainerRef} className="relative h-[250px] sm:h-[350px] md:h-[500px] w-full will-change-transform">
            <PremiumImageDisplay
              key={activeProject.id}
              imageUrl={activeProject.image}
              liveSiteUrl={activeProject.liveSiteUrl}
            />
          </div>
          
          {/* --- OPTIMIZATION APPLIED HERE --- */}
          <div ref={detailsContainerRef} className="flex flex-col justify-center will-change-transform">
            <div>
              <h3 className="animate-in text-2xl sm:text-3xl font-bold tracking-tight text-primary mb-3" data-cursor-text>{activeProject.title}</h3>
              <p className="animate-in text-accent font-semibold tracking-wide mb-6">{activeProject.tagline}</p>
              <p className="animate-in text-secondary leading-relaxed mb-8">{activeProject.description}</p>
              <h4 className="animate-in text-lg font-semibold text-primary/90 mb-4">Core Features</h4>
              <ul className="animate-in grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-2 mb-8 text-secondary/90">
                  {activeProject.features.slice(0, 6).map((feature: string) => (
                      <li key={feature} className="flex items-start">
                          <span className="text-accent mr-2 mt-1">&#8227;</span>
                          <span>{feature}</span>
                      </li>
                  ))}
              </ul>
              <h4 className="animate-in text-lg font-semibold text-primary/90 mb-4">Tech Stack</h4>
              <div className="animate-in flex flex-wrap gap-2">
                {activeProject.stack.map((tech: string) => (
                  <span key={tech} className="bg-surface/80 border border-secondary/10 text-secondary/90 text-sm px-3 py-1 rounded-full">{tech}</span>
                ))}
              </div>
            </div>
          </div>
        </div>
        
        <div className="project-content-reveal mt-16 md:mt-20 invisible">
          <ProjectNavigation 
            onPrev={() => handleNavigation('prev')}
            onNext={() => handleNavigation('next')}
            currentIndex={activeIndex}
            totalCount={projectsData.length}
          />
        </div>
      </div>
    </section>
  );
};

export default Projects;

--- END OF FILE: src/components/sections/Projects.tsx ---


--- FILE: src/components/sections/Testimonials.tsx ---
// src/components/sections/Testimonials.tsx -- MODIFIED WITH will-change

"use client";

import { useState, useEffect, useRef } from 'react';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import SplitType from 'split-type';
import { Quote, MoveLeft, MoveRight } from 'lucide-react';

gsap.registerPlugin(ScrollTrigger);

const testimonialsData = [
  { quote: "Working with Zain was a game-changer. His technical expertise and design sense transformed our vision into a stunning, high-performance reality. The process was seamless, and the result exceeded all expectations.", name: "Hassan Amir", title: "Owner, Genius Mart Inc." },
  { quote: "The level of professionalism and the quality of the final product were simply outstanding. Zain is not just a developer; he's a digital architect who builds experiences that are both beautiful and incredibly functional.", name: "Sana Ihsan", title: "Founder, AJ Collections" },
  { quote: "I was blown away by the fluid animations and the immersive feel of the platform. It's rare to find a developer who understands both deep technical challenges and the nuances of premium user experience. Highly recommended.", name: "Mr. Sohaib", title: "Marketing Director, Sky Scanning" },
];

const Testimonials = () => {
  const [activeIndex, setActiveIndex] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);
  const sectionRef = useRef<HTMLElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const quoteRefs = useRef<(HTMLDivElement | null)[]>([]);
  const splitInstances = useRef<SplitType[]>([]);

  useEffect(() => {
    const ctx = gsap.context(() => {
      quoteRefs.current.forEach((quoteEl, index) => {
        if (quoteEl) {
          const textElement = quoteEl.querySelector('.quote-text');
          if (textElement) {
            splitInstances.current[index] = new SplitType(textElement as HTMLElement, { types: 'words,chars' });
          }
        }
      });

      quoteRefs.current.forEach((quote, index) => {
        if (!quote) return;
        const chars = splitInstances.current[index]?.chars || [];
        gsap.set(chars, { autoAlpha: 0 });
        
        if (index === 0) {
          gsap.set(quote, { autoAlpha: 1, z: 0, scale: 1 });
          gsap.to(splitInstances.current[0].chars, { autoAlpha: 1, y: 0, stagger: 0.02, duration: 0.4, ease: 'power2.out' });
        } else {
          gsap.set(quote, { autoAlpha: 0, z: -100, scale: 0.9 });
        }
      });

      const tl = gsap.timeline({
        scrollTrigger: { trigger: sectionRef.current, start: 'top 60%', toggleActions: 'play none none reverse' },
      });
      tl.fromTo('.testimonial-title', { autoAlpha: 0, y: 50 }, { autoAlpha: 1, y: 0, duration: 0.8, ease: 'power3.out' })
        .fromTo(containerRef.current, { autoAlpha: 0, y: 50, scale: 0.95, rotateX: -10 }, { autoAlpha: 1, y: 0, scale: 1, rotateX: 0, duration: 1, ease: 'power3.out' }, "-=0.6")
        .fromTo('.testimonial-nav', { autoAlpha: 0 }, { autoAlpha: 1, duration: 0.5 }, "-=0.5");
      
    }, sectionRef);
    return () => ctx.revert();
  }, []);
  
  const goToQuote = (index: number) => {
    if (isAnimating || index === activeIndex) return;
    setIsAnimating(true);

    const container = containerRef.current;
    const currentCard = quoteRefs.current[activeIndex];
    const nextCard = quoteRefs.current[index];
    const currentChars = splitInstances.current[activeIndex]?.chars || [];
    const nextChars = splitInstances.current[index]?.chars || [];
    
    if (!container || !currentCard || !nextCard) {
      setIsAnimating(false);
      return;
    }

    gsap.set(nextCard, { autoAlpha: 1 });
    const newHeight = nextCard.offsetHeight;
    gsap.set(nextCard, { autoAlpha: 0 });

    const tl = gsap.timeline({ 
      onComplete: () => {
        setActiveIndex(index);
        setIsAnimating(false);
      } 
    });

    tl.to(container, { height: newHeight, duration: 0.4, ease: 'power3.inOut' })
      .to(currentChars, { autoAlpha: 0, y: -15, stagger: 0.005, duration: 0.25, ease: 'power2.in' }, 0)
      .to(currentCard, { rotateY: 20, z: -100, autoAlpha: 0, scale: 0.95, duration: 0.4, ease: 'power3.in' }, 0)
      .fromTo(nextCard, 
        { rotateY: -20, z: -100, autoAlpha: 0, scale: 0.95 },
        { rotateY: 0, z: 0, autoAlpha: 1, scale: 1, duration: 0.4, ease: 'power3.out' }, 
        0.15
      )
      .fromTo(nextChars, 
        { y: 15, autoAlpha: 0 }, 
        { y: 0, autoAlpha: 1, stagger: 0.015, duration: 0.4, ease: 'power2.out' },
        "-=0.25"
      );
  };
  
  const handleNav = (direction: 'prev' | 'next') => {
    const newIndex = direction === 'next'
      ? (activeIndex + 1) % testimonialsData.length
      : (activeIndex - 1 + testimonialsData.length) % testimonialsData.length;
    goToQuote(newIndex);
  };

  return (
    <section id="testimonials" ref={sectionRef} className="relative min-h-screen py-32 px-4 sm:px-6 lg:px-8 flex flex-col items-center justify-center">
      <div className="w-full max-w-4xl text-center" style={{ perspective: '1000px' }}>
        <h2 className="testimonial-title text-4xl md:text-5xl font-bold tracking-tighter mb-16 invisible" data-cursor-text>
          What My Clients Say
        </h2>

        {/* --- OPTIMIZATION APPLIED HERE --- */}
        <div ref={containerRef} className="testimonial-card-container relative w-full p-6 sm:p-8 md:p-12 min-h-[450px] sm:min-h-[420px] md:min-h-[380px] rounded-xl border border-secondary/10 bg-surface/30 backdrop-blur-lg invisible will-change-transform" style={{ transformStyle: 'preserve-3d' }}>
          <Quote className="absolute top-6 sm:top-8 left-6 sm:left-8 text-secondary/10 w-16 h-16 sm:w-20 sm:h-20" strokeWidth={1} />
          
          {testimonialsData.map((testimonial, index) => (
            <div
              key={index}
              ref={el => { if (el) quoteRefs.current[index] = el; }}
              className="absolute inset-0 flex flex-col justify-between p-6 sm:p-8 md:p-12 text-left"
            >
              <div className="flex-1 flex items-center">
                <p className="quote-text text-base sm:text-lg md:text-xl font-light text-primary/90 leading-relaxed sm:leading-loose break-words" data-cursor-text>
                  {testimonial.quote}
                </p>
              </div>

              <div className="pt-8">
                <h4 className="font-bold text-primary text-lg">{testimonial.name}</h4>
                <p className="text-secondary">{testimonial.title}</p>
              </div>
            </div>
          ))}
        </div>

        <div className="testimonial-nav mt-12 flex justify-center items-center gap-6 invisible">
           <button onClick={() => handleNav('prev')} className="group p-3 border border-secondary/30 rounded-full hover:border-accent transition-colors duration-300 disabled:opacity-50" data-cursor-hover aria-label="Previous testimonial" disabled={isAnimating}>
            <MoveLeft className="text-secondary group-hover:text-accent transition-colors" />
          </button>
          <div className="flex justify-center gap-3">
            {testimonialsData.map((_, index) => (
              <button
                key={index}
                onClick={() => goToQuote(index)}
                className="w-12 h-1 rounded-full transition-colors duration-300 disabled:cursor-not-allowed"
                style={{ backgroundColor: activeIndex === index ? '#00F5D4' : 'rgba(136, 136, 136, 0.2)' }}
                aria-label={`Go to testimonial ${index + 1}`}
                data-cursor-hover
                disabled={isAnimating}
              />
            ))}
          </div>
          <button onClick={() => handleNav('next')} className="group p-3 border border-secondary/30 rounded-full hover:border-accent transition-colors duration-300 disabled:opacity-50" data-cursor-hover aria-label="Next testimonial" disabled={isAnimating}>
            <MoveRight className="text-secondary group-hover:text-accent transition-colors" />
          </button>
        </div>
      </div>
    </section>
  );
};

export default Testimonials;

--- END OF FILE: src/components/sections/Testimonials.tsx ---


--- FILE: src/contexts/LoadingContext.tsx ---
// src/contexts/LoadingContext.tsx
"use client";

import React, { createContext, useContext, useState, ReactNode } from 'react';

interface LoadingContextType {
  isLoading: boolean;
  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;
}

const LoadingContext = createContext<LoadingContextType | undefined>(undefined);

export const useLoading = () => {
  const context = useContext(LoadingContext);
  if (!context) {
    throw new Error('useLoading must be used within a LoadingProvider');
  }
  return context;
};

export const LoadingProvider = ({ children }: { children: ReactNode }) => {
  const [isLoading, setIsLoading] = useState(true);

  return (
    <LoadingContext.Provider value={{ isLoading, setIsLoading }}>
      {children}
    </LoadingContext.Provider>
  );
};

--- END OF FILE: src/contexts/LoadingContext.tsx ---


--- FILE: src/contexts/ResumeViewerContext.tsx ---
// src/contexts/ResumeViewerContext.tsx
"use client";

import React, { createContext, useContext, useState, ReactNode } from 'react';
import ResumeViewer from '@/components/core/ResumeViewer';

interface ResumeViewerContextType {
  openResume: () => void;
}

const ResumeViewerContext = createContext<ResumeViewerContextType | undefined>(undefined);

export const useResumeViewer = () => {
  const context = useContext(ResumeViewerContext);
  if (!context) {
    throw new Error('useResumeViewer must be used within a ResumeViewerProvider');
  }
  return context;
};

export const ResumeViewerProvider = ({ children }: { children: ReactNode }) => {
  const [isOpen, setIsOpen] = useState(false);

  const openResume = () => setIsOpen(true);
  const closeResume = () => setIsOpen(false);

  return (
    <ResumeViewerContext.Provider value={{ openResume }}>
      {children}
      <ResumeViewer isOpen={isOpen} onClose={closeResume} />
    </ResumeViewerContext.Provider>
  );
};

--- END OF FILE: src/contexts/ResumeViewerContext.tsx ---


--- FILE: src/contexts/ThemeContext.tsx ---
// src/contexts/ThemeContext.tsx
"use client";

import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';
import gsap from 'gsap';

type Theme = 'obsidian' | 'marble' | 'blueprint';

interface ThemeContextType {
  theme: Theme;
  setTheme: (theme: Theme) => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider = ({ children }: { children: React.ReactNode }) => {
  const [theme, setThemeState] = useState<Theme>('obsidian');
  const transitionOverlayRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // On initial load, try to get the theme from localStorage.
    const savedTheme = localStorage.getItem('portfolio-theme') as Theme | null;
    if (savedTheme && ['obsidian', 'marble', 'blueprint'].includes(savedTheme)) {
      document.documentElement.setAttribute('data-theme', savedTheme);
      setThemeState(savedTheme);
    } else {
      // Set default if nothing is saved
      document.documentElement.setAttribute('data-theme', 'obsidian');
    }
  }, []);

  const setTheme = useCallback((newTheme: Theme) => {
    if (newTheme === theme) return;

    const overlay = transitionOverlayRef.current;
    if (!overlay) return;
    
    // 1. Get the background color of the CURRENT theme
    const currentBg = getComputedStyle(document.documentElement).getPropertyValue('--color-background');
    overlay.style.backgroundColor = `rgb(${currentBg})`;

    gsap.timeline()
      .set(overlay, { autoAlpha: 1 }) // Make the overlay visible (covering the old theme)
      .call(() => {
        // 2. Instantly switch the theme underneath the overlay
        document.documentElement.setAttribute('data-theme', newTheme);
        setThemeState(newTheme);
        localStorage.setItem('portfolio-theme', newTheme);
      })
      .to(overlay, { 
        autoAlpha: 0, 
        duration: 1.2, // The duration of the cross-fade
        ease: 'power3.inOut' 
      });

  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
      {/* The transition overlay div */}
      <div
        ref={transitionOverlayRef}
        className="fixed inset-0 z-[10000] pointer-events-none"
        style={{ opacity: 0 }}
      />
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

--- END OF FILE: src/contexts/ThemeContext.tsx ---


--- FILE: src/hooks/useIsWebKit.ts ---
// src/hooks/useIsWebKit.ts
"use client";

import { useState, useEffect } from 'react';

/**
 * A client-side hook to determine if the browser is using the WebKit/Blink rendering engine.
 * Handles server-side rendering by defaulting to `false`.
 * @returns {boolean} `true` if the browser is WebKit-based (Chrome, Safari, Edge, etc.), otherwise `false`.
 */
export const useIsWebKit = () => {
  const [isWebKit, setIsWebKit] = useState(false);

  useEffect(() => {
    // This check is robust for identifying Chrome, Safari, and modern Edge/Opera,
    // while correctly excluding Firefox. 'InstallTrigger' is a Firefox-specific property.
    const isFirefox = typeof (window as any).InstallTrigger !== 'undefined';
    if (!isFirefox) {
      setIsWebKit(true);
    }
  }, []);

  return isWebKit;
};

--- END OF FILE: src/hooks/useIsWebKit.ts ---


--- FILE: src/hooks/useMediaQuery.ts ---
// src/hooks/useMediaQuery.ts -- NEW FILE

"use client";

import { useState, useEffect } from 'react';

/**
 * A client-side hook for tracking the state of a media query.
 * Handles server-side rendering gracefully by defaulting to `false`.
 * @param {string} query - The media query string to match (e.g., '(min-width: 768px)').
 * @returns {boolean} `true` if the query matches, otherwise `false`.
 */
export const useMediaQuery = (query: string): boolean => {
  const [matches, setMatches] = useState(false);

  useEffect(() => {
    // Ensure this runs only on the client
    if (typeof window !== 'undefined') {
      const media = window.matchMedia(query);
      
      // Update state if the media query match status changes
      const updateMatch = () => setMatches(media.matches);

      // Set the initial value
      updateMatch();
      
      // Add a listener for changes
      media.addEventListener('change', updateMatch);
      
      // Cleanup listener on component unmount
      return () => media.removeEventListener('change', updateMatch);
    }
  }, [query]);

  return matches;
};

--- END OF FILE: src/hooks/useMediaQuery.ts ---


--- FILE: src/lib/data.ts ---
// src/lib/data.ts -- REFINED WITH CASE STUDY FORMAT

export const projectsData = [
  {
    id: 1,
    title: "Genius Mart",
    tagline: "High-Performance E-commerce Platform",
    description: "The challenge was to build a premium online grocery store for the Pakistani market that felt as fast and responsive as a native app, even on slower networks. The solution involved a server-first architecture using Next.js, resulting in an ultra-fast, PWA-ready platform with a 95+ Lighthouse score, built from scratch in 26 days.",
    features: [
      "Robust Google OAuth Authentication",
      "Instant Live Search (<300ms)",
      "Dynamic Shopping Cart & Wishlist",
      "Secure Paymob Payment Gateway",
      "Comprehensive User Dashboard",
      "Fully Responsive PWA Design",
    ],
    stack: [
      "Next.js 15",
      "React 19",
      "SCSS Modules",
      "Supabase",
      "Vercel",
      "Cloudinary",
    ],
    image: "/projects/genius-mart-display.png",
    liveSiteUrl: "https://geniusmart.vercel.app/",
  },
  {
    id: 2,
    title: "Genius Mart Admin Portal",
    tagline: "Enterprise-Grade Backend Management System",
    description: "Standard e-commerce backends are often slow and clunky. I engineered a custom, blazing-fast admin portal with a hyper-granular, per-user permission system. The outcome is an intuitive, secure, and highly efficient interface that allows for enterprise-grade management of products, orders, and users.",
    features: [
      "Real-time Analytics Dashboard",
      "Granular, Per-User Permission System",
      "Dynamic, Action-Based UI",
      "Professional PDF Invoice Generation",
      "Row Level Security (RLS) Policies",
      "Custom PL/pgSQL Database Functions",
    ],
    stack: [
      "Next.js 15",
      "React 18",
      "TypeScript",
      "Supabase",
      "Ant Design 5",
      "Zustand",
    ],
    image: "/projects/admin-portal-display.png",
    // No live site URL for admin portals
  },
  {
    id: 3,
    title: "AJ Collections",
    tagline: "Bespoke E-commerce for Fine Accessories",
    description: "The goal was to create a digital storefront that mirrored the elegance of the jewelry itself. By building a custom Next.js application from the ground up, I delivered a highly attractive and performant user experience, focusing on visual fidelity and a seamless, secure checkout flow to drive conversions.",
    features: [
      "Advanced Image Zoom & Product Gallery",
      "Secure Multi-Step Checkout Flow",
      "Personalized User Accounts",
      "Dynamic Filtering by Category & Material",
      "Optimized for Core Web Vitals",
      "Custom Admin Inventory Management",
    ],
    stack: [
      "Next.js",
      "TypeScript",
      "Sass/SCSS",
      "PostgreSQL",
      "Supabase Auth",
      "Supabase Storage",
    ],
    image: "/projects/ajcollections-display.png",
    liveSiteUrl: "https://ajcollections.vercel.app/",
  },
];

--- END OF FILE: src/lib/data.ts ---


--- FILE: tailwind.config.ts ---
// tailwind.config.ts
import type { Config } from "tailwindcss";
// --- Step 1: Import the 'plugin' function from tailwindcss/plugin ---
import plugin from 'tailwindcss/plugin';

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  darkMode: "class",
  theme: {
    extend: {
      colors: {
        'background': 'rgb(var(--color-background) / <alpha-value>)',
        'surface': 'rgb(var(--color-surface) / <alpha-value>)',
        'primary': 'rgb(var(--color-primary) / <alpha-value>)',
        'secondary': 'rgb(var(--color-secondary) / <alpha-value>)',
        'accent': 'rgb(var(--color-accent) / <alpha-value>)',
        'accent-hover': 'rgb(var(--color-accent-hover) / <alpha-value>)',
      },
      animation: {
        sheen: 'sheen 2s linear infinite',
        'subtle-pan': 'subtle-pan 120s linear infinite',
        'rotate-schematic': 'rotate-schematic 60s linear infinite',
      },
      keyframes: {
        sheen: { '0%': { backgroundPosition: '200% center' }, '100%': { backgroundPosition: '-200% center' } },
        'subtle-pan': { '0%': { backgroundPosition: '0% 0%' }, '100%': { backgroundPosition: '100% 100%' } },
        'rotate-schematic': { '0%': { transform: 'rotate(0deg)' }, '100%': { transform: 'rotate(360deg)' } },
      },
    },
  },
  // --- Step 2: Add the custom plugin to create the text-fill-transparent utility ---
  plugins: [
    plugin(function({ addUtilities }) {
      addUtilities({
        '.text-fill-transparent': {
          '-webkit-text-fill-color': 'transparent',
        },
      })
    })
  ],
};
export default config;

--- END OF FILE: tailwind.config.ts ---


--- FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- END OF FILE: tsconfig.json ---

